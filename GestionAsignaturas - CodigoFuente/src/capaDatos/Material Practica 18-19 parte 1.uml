<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLLabProfile="http:///schemas/UMLLabProfile/NS/0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http:///schemas/UMLLabProfile/NS/0 pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile">
  <uml:Model xmi:id="_y2_l4I4fEeqaUfD-UOeXhg" name="Material_Practica_18_19_parte_1">
    <eAnnotations xmi:id="_zIZe8I4fEeqaUfD-UOeXhg" source="http://ns.yatta.de/umllab">
      <contents xmi:type="ecore:EAnnotation" xmi:id="_zIZe8Y4fEeqaUfD-UOeXhg" source="codegen">
        <details xmi:id="_zIZe8o4fEeqaUfD-UOeXhg" key="codegenDirectory" value="/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src"/>
        <details xmi:id="_zqb1AI4fEeqaUfD-UOeXhg" key="AssociatedSourceCode" value="/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorAlumno.java;84813767/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorConvocatoria.java;124843604/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorCurso.java;1776775874/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorEvaluacion.java;2441759010/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorExamen.java;4058616846/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorGrupoClase.java;250205361/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorPractica.java;2862230478/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorMatricula.java;1717799685/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorGrupoPractica.java;139738558/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorProfesor.java;1751240059/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/ControladorTutoria.java;4110164161/1;/Material Practica 18-19 parte 1/GestionAsignaturas - CodigoFuente/src/capaDatos/DataAccessObject.java;2459973666/1;"/>
      </contents>
    </eAnnotations>
    <elementImport xmi:id="_zYfJYI4fEeqaUfD-UOeXhg">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </elementImport>
    <elementImport xmi:id="_zYfJYY4fEeqaUfD-UOeXhg">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
    </elementImport>
    <elementImport xmi:id="_zYgXgI4fEeqaUfD-UOeXhg">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
    </elementImport>
    <elementImport xmi:id="_zYgXgY4fEeqaUfD-UOeXhg">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
    </elementImport>
    <elementImport xmi:id="_zYg-kI4fEeqaUfD-UOeXhg">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
    </elementImport>
    <elementImport xmi:id="_zYg-kY4fEeqaUfD-UOeXhg">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </elementImport>
    <elementImport xmi:id="_zYhloI4fEeqaUfD-UOeXhg">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
    </elementImport>
    <elementImport xmi:id="_zYhloY4fEeqaUfD-UOeXhg">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#short"/>
    </elementImport>
    <elementImport xmi:id="_zYizwI4fEeqaUfD-UOeXhg">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
    </elementImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_zYkB4I4fEeqaUfD-UOeXhg" name="capaInterfaz">
      <packagedElement xmi:type="uml:Package" xmi:id="_zYkB4Y4fEeqaUfD-UOeXhg" name="listados">
        <packagedElement xmi:type="uml:Class" xmi:id="_zeUroI4fEeqaUfD-UOeXhg" name="ListadoAlumno"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_zeayQI4fEeqaUfD-UOeXhg" name="ListadoEvaluacion"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_zeayQo4fEeqaUfD-UOeXhg" name="ListadoHistoricoAlumno"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_ze8WsI4fEeqaUfD-UOeXhg" name="ListadoGrupoPractica"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_zfMOUI4fEeqaUfD-UOeXhg" name="ListadoProfesor"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_zYuZ8I4fEeqaUfD-UOeXhg" name="capaLogicaNegocio">
      <packagedElement xmi:type="uml:Class" xmi:id="_zebZUY4fEeqaUfD-UOeXhg" name="Alumno"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_zecAYY4fEeqaUfD-UOeXhg" name="Curso"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_zecncY4fEeqaUfD-UOeXhg" name="Evaluacion"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_zedOgY4fEeqaUfD-UOeXhg" name="GrupoClase"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_zed1kY4fEeqaUfD-UOeXhg" name="Matricula"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_zer4AI4fEeqaUfD-UOeXhg" name="Convocatoria"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_zeuUQI4fEeqaUfD-UOeXhg" name="GrupoPractica"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_zfM1YY4fEeqaUfD-UOeXhg" name="Profesor"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_zfaQwI4fEeqaUfD-UOeXhg" name="Tutoria"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_zYvBAI4fEeqaUfD-UOeXhg" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_zYwPII4fEeqaUfD-UOeXhg" name="sql">
        <packagedElement xmi:type="uml:Interface" xmi:id="_zeg44I4fEeqaUfD-UOeXhg" name="PreparedStatement"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_zehf8Y4fEeqaUfD-UOeXhg" name="ResultSet"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_zeiuEI4fEeqaUfD-UOeXhg" name="SQLException"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_zfctAI4fEeqaUfD-UOeXhg" name="Connection"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_zfeiMY4fEeqaUfD-UOeXhg" name="DriverManager"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_zY6nMI4fEeqaUfD-UOeXhg" name="util">
        <packagedElement xmi:type="uml:Class" xmi:id="_zejVII4fEeqaUfD-UOeXhg" name="ArrayList"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_zej8MY4fEeqaUfD-UOeXhg" name="List"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_zf5Y8o4fEeqaUfD-UOeXhg" name="lang">
        <packagedElement xmi:type="uml:DataType" xmi:id="_zf5Y844fEeqaUfD-UOeXhg" name="Float"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_zZRMgI4fEeqaUfD-UOeXhg" name="capaDatos">
      <packagedElement xmi:type="uml:Class" xmi:id="_zawaQI4fEeqaUfD-UOeXhg" name="ControladorAlumno">
        <ownedComment xmi:id="_zgoYwI4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
altas, bajas, modificaciones y consultas de alumnos
 *
@author Confiencial</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgWE4I4fEeqaUfD-UOeXhg" name="estaDadoDeAlta" specification="_zfkBwI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgWE4Y4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgWE4o4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT DNI &quot;
                                        + &quot;FROM alumno &quot;
                                        + &quot;WHERE (DNI = ?)&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, alumno.getDNI());

         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         rs.close();
         dataAccessObject.close();
         return ok;
     }
     catch (SQLException ex) {
         System.out.println(ex.getMessage());
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en estaDadoDeAlta&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgWr8I4fEeqaUfD-UOeXhg" name="estaDadoDeAltaEnCursoActual" specification="_zfko0I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgWr8Y4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgWr8o4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT ALUMNO_DNI &quot;
                                        + &quot;FROM matricula &quot;
                                        + &quot;WHERE ((ALUMNO_DNI = ?) &quot;
                                        + &quot;   AND (CURSO_Cod_CURSO = ?))&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         Curso curso = new Curso();
         stmt.setString(1, alumno.getDNI());
         stmt.setInt(2, curso.getCursoActual());
         
         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         rs.close();
         dataAccessObject.close();
         return ok;
     }
     catch (SQLException ex) {
         System.out.println(ex.getMessage());
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en estaDadoDeAltaEnCursoActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgXTAI4fEeqaUfD-UOeXhg" name="noEstaDadoDeAlta" specification="_zfko044fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgXTAY4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgXTAo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgXTA44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return (! this.estaDadoDeAlta(alumno,dataAccessObject));
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgXTBI4fEeqaUfD-UOeXhg" name="numMatriculaEstaDadaDeAlta" specification="_zflP444fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgXTBY4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgXTBo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT N_Mat &quot;
                                        + &quot;FROM alumno &quot;
                                        + &quot;WHERE (N_Mat = ?)&quot;);

     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, alumno.getN_Mat());

         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         rs.close();
         dataAccessObject.close();
         return ok;
     }
     catch (SQLException ex) {
         System.out.println(ex.getMessage());
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en numMatriculaEstaDadaDeAlta&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgX6EI4fEeqaUfD-UOeXhg" name="numMatriculaEstaDadaDeAltaEnCursoActual" specification="_zfl28I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgX6EY4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgX6Eo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT alumno.N_Mat &quot;
                                        + &quot;FROM alumno, matricula &quot;
                                        + &quot;WHERE ((alumno.N_Mat = ?) &quot;
                                        + &quot;   AND (matricula.ALUMNO_DNI = alumno.DNI) &quot;
                                        + &quot;   AND (matricula.CURSO_Cod_CURSO = ?))&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         Curso curso = new Curso();
         stmt.setString(1, alumno.getN_Mat());
         stmt.setInt(2, curso.getCursoActual());

         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         rs.close();
         dataAccessObject.close();
         return ok;
     }
     catch (SQLException ex) {
         System.out.println(ex.getMessage());
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en numMatriculaEstaDadaDeAltaEnCursoActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgX6E44fEeqaUfD-UOeXhg" name="estaDadoDeAlta" specification="_zfl2844fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgX6FI4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgX6FY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgX6Fo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT DNI &quot;
                                        + &quot;FROM alumno &quot;
                                        + &quot;WHERE (DNI = ?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, alumno.getDNI());

         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         rs.close();
         return ok;
     }
     catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException(&quot;Problema en estaDadoDeAlta&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgX6F44fEeqaUfD-UOeXhg" name="intertarEnTablaAlumno" specification="_zfnFEI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgX6GI4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgX6GY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;INSERT ALUMNO VALUES (?,?,?,?)&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, alumno.getDNI());
         stmt.setString(2, alumno.getN_Mat());
         stmt.setString(3, alumno.getNombre());
         stmt.setString(4, alumno.getApellidos());
         System.out.println(alumno.getDNI());
         System.out.println(alumno.getN_Mat());
         System.out.println(alumno.getNombre());
         System.out.println(alumno.getApellidos());
         dataAccessObject.actualizar();

         stmt.close();

     } catch (SQLException ex) {
   //      dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en insertarEnTablaAlumno al insertar alumno&quot;);
      }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgYhII4fEeqaUfD-UOeXhg" name="darAltaAlumnoConvocatoriaOrdinaria" specification="_zfnsII4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgYhIY4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgYhIo4fEeqaUfD-UOeXhg" name="matricula" type="_zed1kY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgYhI44fEeqaUfD-UOeXhg" name="evaluacion" type="_zecncY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgYhJI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>boolean repetidor = false;

     if (this.noEstaDadoDeAlta(alumno, dataAccessObject)) {
         this.intertarEnTablaAlumno(alumno, dataAccessObject);
     } else {
         repetidor = true;
     }

     matricula.altaMatricula(dataAccessObject);

     if (repetidor) {
         evaluacion.actualizarNotasAprobadasConvocatoriaAnterior(dataAccessObject);
     }
     evaluacion.altaEvaluacion(dataAccessObject);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgYhJY4fEeqaUfD-UOeXhg" name="darAltaAlumnoConvocatoriaExtraordinaria" specification="_zfo6Qo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgYhJo4fEeqaUfD-UOeXhg" name="evaluacion" type="_zecncY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgYhJ44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>evaluacion.actualizarNotasAprobadasConvocatoriaAnterior(dataAccessObject);
     evaluacion.altaEvaluacion(dataAccessObject);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgYhKI4fEeqaUfD-UOeXhg" name="darBajaAlumno" specification="_zfqvcI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgYhKY4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();

     try {
     ControladorEvaluacion DAOEvaluacion = new ControladorEvaluacion();
     DAOEvaluacion.borrarEnTablaEvaluacion(alumno.getDNI(), dataAccessObject);
     
     ControladorMatricula DAOMatricula = new ControladorMatricula();
     DAOMatricula.borrarEnTablaMatricula(alumno.getDNI(), dataAccessObject);

     this.borrarEnTablaAlumno(alumno.getDNI(), dataAccessObject);

     dataAccessObject.close();
      } catch (RuntimeException e) {
          dataAccessObject.rollback();
          throw new RuntimeException (e.getMessage());
      }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgYhKo4fEeqaUfD-UOeXhg" name="borrarEnTablaAlumno" specification="_zelxYI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgYhK44fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgYhLI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM alumno &quot;
                                         + &quot;WHERE (DNI = ?)&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, dni);
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e1) {
//         dataAccessObject.rollback();
         throw new RuntimeException(&quot;problema al eliminar en alumno&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgZIMI4fEeqaUfD-UOeXhg" name="cambioAConvocatoriaExtraordinaria" specification="_zfqvco4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgZIMY4fEeqaUfD-UOeXhg" name="resultado" type="_zej8MY4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>if (! resultado.isEmpty()){
         DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
         Alumno alumno;
         String convocatoria = &quot;extraordinaria&quot;;
         int curso = resultado.get(0).getEvaluacion().getCod_Curso();
         Evaluacion evaluacion_nueva, evaluacion_anterior;
         try {
             for (int i = 0; i &lt; resultado.size(); i++){
                 alumno = resultado.get(i).getAlumno();
                 evaluacion_anterior = resultado.get(i).getEvaluacion();
                 evaluacion_nueva = new Evaluacion(alumno.getDNI(), curso,
                                                   convocatoria);
                 System.out.println(&quot;Checkpoint 1&quot;);
                 if (evaluacion_anterior.getNota_Final() &lt; ((float)5.0)) {
                     System.out.println(&quot;Checkpoint 2&quot;);
                     this.darAltaAlumnoConvocatoriaExtraordinaria(evaluacion_nueva,
                                                                  dataAccessObject);
                     System.out.println(&quot;Checkpoint 3&quot;);
                 }
             }
             dataAccessObject.close();
         } catch (RuntimeException e) {
             dataAccessObject.rollback();
             throw new RuntimeException(&quot;Ha ocurrido un error durante la actualizaciÃ³n. cambioAConvocatoriaExtraordinaria&quot;);
         }
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgZIMo4fEeqaUfD-UOeXhg" name="realizarConsultaAlumno" specification="_zfr9kI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgZIM44fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgZINI4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgZINY4fEeqaUfD-UOeXhg" type="_zeUroI4fEeqaUfD-UOeXhg" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_zgZINo4fEeqaUfD-UOeXhg" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean primeraClausulaWhere = true;
     
     StringBuilder sql = new StringBuilder(&quot; SELECT alumno.DNI, alumno.N_Mat, &quot;
                                                + &quot; alumno.Nombre, &quot;
                                                + &quot; alumno.Apellidos, &quot;
                                                + &quot; matricula.GRUPO_CLASE_Cod_GC &quot;
                                         + &quot; FROM alumno, matricula &quot;);

     List&lt;Object> values = new ArrayList&lt;Object>();
     
     if (this.noEstaVacio(alumno.getDNI())){
         sql.append(&quot;WHERE ((alumno.DNI = ?) &quot;);
         values.add(alumno.getDNI());
         primeraClausulaWhere = false;
     }
     
     if (this.noEstaVacio(alumno.getN_Mat())) {
         if (! primeraClausulaWhere) {
             sql.append(&quot; AND &quot;);
         } else {
             sql.append(&quot;WHERE (&quot;);
         }
         sql.append(&quot; (alumno.N_Mat = ?) &quot;);
         values.add(alumno.getN_Mat());
         primeraClausulaWhere = false;
     }

     if (this.noEstaVacio(grupo_clase.getCodGrupoClase())) {

         if (! primeraClausulaWhere) {
             sql.append(&quot; AND &quot;);
         } else {
             sql.append(&quot;WHERE (&quot;);
         }
         sql.append(&quot; (alumno.DNI IN (SELECT ALUMNO_DNI &quot;
                                   + &quot;FROM matricula &quot;
                                   + &quot;WHERE ((GRUPO_CLASE_Cod_GC = ?) &quot;
                                          + &quot;AND (CURSO_Cod_CURSO = ?))&quot;
                                   + &quot;)&quot;
                    + &quot;)&quot;);
         values.add(grupo_clase.getCodGrupoClase());
         Curso curso = new Curso();
         values.add(curso.getCursoActual());
         primeraClausulaWhere = false;

     }

     if (! primeraClausulaWhere) {
         sql.append(&quot; AND &quot;);
     } else {
         sql.append(&quot;WHERE (&quot;);
     }
     sql.append(&quot; (matricula.ALUMNO_DNI = alumno.DNI)) &quot;);

    
     List&lt;ListadoAlumno> resultado = new ArrayList&lt;ListadoAlumno>();
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     
     try{

         System.out.println(sql.toString());
         int i=0;
         for (Object valor: values) {
             if (valor instanceof String ) {
                 stmt.setString(++i, (String)valor);
             }

             if (valor instanceof Integer) {
                 stmt.setInt(++i, (Integer)valor);
             }
             
         }

         ResultSet rs = stmt.executeQuery();
         String num_matricula;
         String dni;
         String nombre;
         String apellidos;

         String grupoclase;

         while (rs.next()) {
             dni = rs.getString(1);
             num_matricula = rs.getString(2);
             nombre = rs.getString(3);
             apellidos = rs.getString(4);
             grupoclase = rs.getString(5);
             resultado.add(new ListadoAlumno(num_matricula, dni, nombre,
                                             apellidos, grupoclase));
         }

         rs.close();
         dataAccessObject.close();
         return resultado;
     } catch (SQLException e) {
         System.out.println(e.getMessage());
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Ha ocurrido un problema al realizar la consulta&quot;);

     } catch (RuntimeException e) {
         System.out.println(e.getMessage());
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Ha ocurrido un problema al realizar la consulta&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgZIN44fEeqaUfD-UOeXhg" name="realizarConsultaHistoricoAlumno" specification="_zazdkI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgZIOI4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgZIOY4fEeqaUfD-UOeXhg" name="convocatoria">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgZIOo4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgZIO44fEeqaUfD-UOeXhg" type="_zeayQo4fEeqaUfD-UOeXhg" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_zgZIPI4fEeqaUfD-UOeXhg" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT evaluacion.ALUMNO_DNI, &quot;
                                                + &quot;evaluacion.CURSO_Cod_CURSO, &quot;
                                                + &quot;evaluacion.CONVOCATORIA_idCONVOCATORIA, &quot;
                                                + &quot;evaluacion.Nota_P1, evaluacion.Nota_P2, &quot;
                                                + &quot;evaluacion.Nota_P3, evaluacion.Nota_P4, &quot;
                                                + &quot;evaluacion.Nota_Pr, evaluacion.Nota_Final &quot;
                                         + &quot;FROM evaluacion, alumno &quot;
                                         + &quot;WHERE ((alumno.DNI = evaluacion.ALUMNO_DNI) &quot;);

     List&lt;Object> values = new ArrayList&lt;Object>();
     List&lt;ListadoHistoricoAlumno> resultado = new ArrayList&lt;ListadoHistoricoAlumno>();

     if (this.noEstaVacio(dni_alumno)) {
         sql.append(&quot; AND (evaluacion.ALUMNO_DNI = ?) &quot;);
         values.add(dni_alumno);
     }

     if (this.noEstaVacio(convocatoria)) {
         sql.append(&quot; AND (evaluacion.CONVOCATORIA_idCONVOCATORIA = ?) &quot;);
         values.add(convocatoria);
     }

     if (curso != -1) {
         sql.append(&quot; AND (evaluacion.CURSO_Cod_CURSO = ?) &quot;);
         values.add(curso);
     }

     sql.append(&quot;)&quot;);

     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try{
         System.out.println(sql.toString());
         int i=0;
         for (Object valor: values) {
             if (valor instanceof Integer) {
                 stmt.setInt(++i, (Integer)valor);
             }

             if (valor instanceof String) {
                 stmt.setString(++i, (String)valor);
             }
         }

         ResultSet rs = stmt.executeQuery();

         while (rs.next()) {
             resultado.add(new ListadoHistoricoAlumno(rs.getString(1), rs.getInt(2),
                                                      rs.getString(3),
                                                      (rs.getFloat(4) + rs.getFloat(5)
                                                     + rs.getFloat(6) + rs.getFloat(7)),
                                                       rs.getFloat(8), rs.getFloat(9),
                                                       dataAccessObject));
         }

         rs.close();
         dataAccessObject.close();
         return resultado;            
     } catch (SQLException e1) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Ha ocurrido un error al acceder a la Base de Datos&quot;);
     } catch (RuntimeException e2) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Ha ocurrido un error al acceder a la Base de Datos&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgZIPY4fEeqaUfD-UOeXhg" name="obtenerNombreAlumno" specification="_zem_gI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgZIPo4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgZIP44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgZIQI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT Nombre &quot;
                                         + &quot;FROM alumno &quot;
                                         + &quot;WHERE (dni = ?) &quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         stmt.setString(1, dni);
         ResultSet rs = stmt.executeQuery();

         if (rs.next()) {
             return rs.getString(1);
         }
         throw new RuntimeException(&quot;No se ha encontrado un alumno con ese DNI&quot;);

     } catch (SQLException e) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en obtenerNombreAlumno&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgZIQY4fEeqaUfD-UOeXhg" name="obtenerApellidosAlumno" specification="_zenmkI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgZvQI4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgZvQY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgZvQo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT Apellidos &quot;
                                         + &quot;FROM alumno &quot;
                                         + &quot;WHERE (DNI = ?) &quot;);;
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         stmt.setString(1, dni);
         ResultSet rs = stmt.executeQuery();

         if (rs.next()) {
             return rs.getString(1);
         }
         throw new RuntimeException(&quot;No se ha encontrado un alumno con ese DNI&quot;);

     } catch (SQLException e) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en obtenerApellidosAlumno&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgZvQ44fEeqaUfD-UOeXhg" name="obtenerNumMatriculaAlumno" specification="_zenmlI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgZvRI4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgZvRY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgZvRo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT N_Mat &quot;
                                         + &quot;FROM alumno &quot;
                                         + &quot;WHERE (dni = ?) &quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         stmt.setString(1, dni);
         ResultSet rs = stmt.executeQuery();

         if (rs.next()) {
             return rs.getString(1);
         }
         throw new RuntimeException(&quot;No se ha encontrado un alumno con ese DNI&quot;);

     } catch (SQLException e) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en obtenerNumMatriculaAlumno&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgZvR44fEeqaUfD-UOeXhg" name="noEstaVacio" specification="_za0rsI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgZvSI4fEeqaUfD-UOeXhg" name="cadena">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgZvSY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return ((cadena != null) &amp;&amp; (!&quot;&quot;.equals(cadena)));
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgZvSo4fEeqaUfD-UOeXhg" name="actualizarAlumno" specification="_zftLsI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgZvS44fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgZvTI4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgZvTY4fEeqaUfD-UOeXhg" name="dni_antiguo">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgZvTo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;UPDATE ALUMNO &quot;
                                         + &quot;SET DNI = ?,&quot;
                                         + &quot;    N_Mat = ?,&quot;
                                         + &quot;    Nombre = ?, &quot;
                                         + &quot;    Apellidos = ? &quot;
                                         + &quot;WHERE (DNI = ?)&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         stmt.setString(1, alumno.getDNI());
         stmt.setString(2, alumno.getN_Mat());
         stmt.setString(3, alumno.getNombre());
         stmt.setString(4, alumno.getApellidos());
         stmt.setString(5, dni_antiguo);

         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException (&quot;Problema en actualizarAlumno 1&quot;);
     }

     sql = new StringBuilder(&quot;UPDATE MATRICULA &quot;
                           + &quot;SET GRUPO_CLASE_Cod_GC = ? &quot;
                           + &quot;WHERE ((ALUMNO_DNI = ?) &quot;
                           + &quot;AND (CURSO_Cod_CURSO = ?))&quot;);

     if (grupo_clase.noEstaDadoDeAlta(dataAccessObject)) {
         grupo_clase.altaGrupoClase(dataAccessObject);
     }
     stmt = dataAccessObject.getPreparedStatement(sql.toString());
     Curso curso = new Curso();

     try {

         stmt.setString(1, grupo_clase.getCodGrupoClase());
         stmt.setString(2, alumno.getDNI());
         stmt.setInt(3, curso.getCursoActual());

         dataAccessObject.actualizar();
         stmt.close();
         System.out.println(&quot;Adios&quot;);
   //      dataAccessObject.close();
     } catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException (&quot;Problema en actualizarAlumno 2&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_zaxoYI4fEeqaUfD-UOeXhg" name="ControladorAlumno">
          <eAnnotations xmi:id="_zayPcI4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_zayPcY4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_zay2gI4fEeqaUfD-UOeXhg" type="_zawaQI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zazdkI4fEeqaUfD-UOeXhg" name="realizarConsultaHistoricoAlumno" method="_zgZIN44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_za0EoI4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_za0EoY4fEeqaUfD-UOeXhg" name="convocatoria">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_za0Eoo4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_za0Eo44fEeqaUfD-UOeXhg" type="_zeayQo4fEeqaUfD-UOeXhg" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_za0EpI4fEeqaUfD-UOeXhg" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_za0rsI4fEeqaUfD-UOeXhg" name="noEstaVacio" visibility="private" method="_zgZvR44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_za0rsY4fEeqaUfD-UOeXhg" name="cadena">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_za0rso4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zelxYI4fEeqaUfD-UOeXhg" name="borrarEnTablaAlumno" visibility="private" method="_zgYhKo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zelxYY4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zelxYo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zem_gI4fEeqaUfD-UOeXhg" name="obtenerNombreAlumno" method="_zgZIPY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zem_gY4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zem_go4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zem_g44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zenmkI4fEeqaUfD-UOeXhg" name="obtenerApellidosAlumno" method="_zgZIQY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zenmkY4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zenmko4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zenmk44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zenmlI4fEeqaUfD-UOeXhg" name="obtenerNumMatriculaAlumno" method="_zgZvQ44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zenmlY4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zeoNoI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zeoNoY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfkBwI4fEeqaUfD-UOeXhg" name="estaDadoDeAlta" method="_zgWE4I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfkBwY4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfkBwo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfko0I4fEeqaUfD-UOeXhg" name="estaDadoDeAltaEnCursoActual" method="_zgWr8I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfko0Y4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfko0o4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfko044fEeqaUfD-UOeXhg" name="noEstaDadoDeAlta" method="_zgXTAI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zflP4I4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zflP4Y4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zflP4o4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zflP444fEeqaUfD-UOeXhg" name="numMatriculaEstaDadaDeAlta" method="_zgXTBI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zflP5I4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zflP5Y4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfl28I4fEeqaUfD-UOeXhg" name="numMatriculaEstaDadaDeAltaEnCursoActual" method="_zgX6EI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfl28Y4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfl28o4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfl2844fEeqaUfD-UOeXhg" name="estaDadoDeAlta" method="_zgX6E44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfl29I4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfmeAI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfmeAY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfnFEI4fEeqaUfD-UOeXhg" name="intertarEnTablaAlumno" method="_zgX6F44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfnFEY4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfnFEo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfnsII4fEeqaUfD-UOeXhg" name="darAltaAlumnoConvocatoriaOrdinaria" method="_zgYhII4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfoTMI4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfoTMY4fEeqaUfD-UOeXhg" name="matricula" type="_zed1kY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfo6QI4fEeqaUfD-UOeXhg" name="evaluacion" type="_zecncY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfo6QY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfo6Qo4fEeqaUfD-UOeXhg" name="darAltaAlumnoConvocatoriaExtraordinaria" method="_zgYhJY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfo6Q44fEeqaUfD-UOeXhg" name="evaluacion" type="_zecncY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfphUI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfqvcI4fEeqaUfD-UOeXhg" name="darBajaAlumno" method="_zgYhKI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfqvcY4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfqvco4fEeqaUfD-UOeXhg" name="cambioAConvocatoriaExtraordinaria" method="_zgZIMI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfrWgI4fEeqaUfD-UOeXhg" name="resultado" type="_zej8MY4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfr9kI4fEeqaUfD-UOeXhg" name="realizarConsultaAlumno" method="_zgZIMo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfr9kY4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfr9ko4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfr9k44fEeqaUfD-UOeXhg" type="_zeUroI4fEeqaUfD-UOeXhg" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_zfskoI4fEeqaUfD-UOeXhg" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zftLsI4fEeqaUfD-UOeXhg" name="actualizarAlumno" method="_zgZvSo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zftywI4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zftywY4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zftywo4fEeqaUfD-UOeXhg" name="dni_antiguo">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zftyw44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_za49II4fEeqaUfD-UOeXhg" name="ControladorConvocatoria">
        <ownedComment xmi:id="_zgoYwY4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
altas, bajas, modificaciones y consultas de convocatorias.
 *
@author Confiencial</body>
        </ownedComment>
        <ownedAttribute xmi:id="_zgNiAI4fEeqaUfD-UOeXhg" name="dao" visibility="private" isStatic="true" type="_za49II4fEeqaUfD-UOeXhg" association="_zgsqMI4fEeqaUfD-UOeXhg">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_zgOwII4fEeqaUfD-UOeXhg" value="new ControladorConvocatoria ()"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zga9YI4fEeqaUfD-UOeXhg" name="recuperarConvocatoriaActual" specification="_za49IY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zga9YY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>String convocatoriaActual = null;
     StringBuilder sql = new StringBuilder(&quot;SELECT idCONVOCATORIA &quot;
                                         + &quot;FROM convocatoria &quot;
                                         + &quot;WHERE (actual = 1)&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
         
     try {            
         ResultSet rs = stmt.executeQuery();
         if (rs.next()) {
             convocatoriaActual = rs.getString(1);
             rs.close();
             dataAccessObject.close();
             return convocatoriaActual;
         } else {
             rs.close();
             dataAccessObject.close();
             throw new RuntimeException(&quot;No se ha encontrado la convocatoria actual&quot;);
         }
     } catch (SQLException ex) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema al consultar convocatoria actual&quot;);
      }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zga9Yo4fEeqaUfD-UOeXhg" name="cambioConvocatoria" specification="_za6LQI4fEeqaUfD-UOeXhg">
          <language>java</language>
          <body>String convocatoria_actual, nueva_convocatoria_actual;
     Convocatoria convocatoria = new Convocatoria();
     convocatoria_actual = convocatoria.getConvocatoriaActual();
     if (convocatoria_actual.equals(&quot;ordinaria&quot;)) {
         nueva_convocatoria_actual = &quot;extraordinaria&quot;;
     } else {
         nueva_convocatoria_actual = &quot;ordinaria&quot;;
     }
     StringBuilder sql = new StringBuilder(&quot;UPDATE CONVOCATORIA &quot;
                                         + &quot;SET actual = 0 &quot;
                                         + &quot;WHERE (idCONVOCATORIA = ?)&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try{
       stmt.setString(1, convocatoria_actual);
       dataAccessObject.actualizar();

       sql = new StringBuilder(&quot;UPDATE CONVOCATORIA &quot;
                             + &quot;SET actual = 1 &quot;
                             + &quot;WHERE (idCONVOCATORIA = ?)&quot;);

       stmt = dataAccessObject.getPreparedStatement(sql.toString());
       stmt.setString(1, nueva_convocatoria_actual);

       dataAccessObject.actualizar();

       dataAccessObject.close();
     } catch (SQLException ex) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en cambioConvocatoria&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_za49IY4fEeqaUfD-UOeXhg" name="recuperarConvocatoriaActual" method="_zga9YI4fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgoYwo4fEeqaUfD-UOeXhg">
            <body>MÃ©todo que, mediante una consulta sql a la Base de Datos, obtiene
     * el cÃ³digo de la convocatoria actual y lo devuelve como resultado.
     * En caso de que ocurra algÃºn error, se lanzarÃ¡ una excepciÃ³n.
     *
     * @return Si la ejecuciÃ³n del mÃ©todo se realiza satisfactoriamente, devuelve
     *         el cÃ³digo de la convocatoria actual.
     *         Si no encuentra una convocatoria que satisfaga la condiciÃ³n de la
     *         consulta, lanzarÃ¡ una excepciÃ³n.
     *         Si ocurre algÃºn error, lanzarÃ¡ una excepciÃ³n.</body>
          </ownedComment>
          <ownedParameter xmi:id="_za49Io4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_za6LQI4fEeqaUfD-UOeXhg" name="cambioConvocatoria" method="_zga9Yo4fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgoYw44fEeqaUfD-UOeXhg">
            <body>MÃ©todo que actualiza, en la Base de Datos, la convocatoria actual.
     *  Si ocurre algÃºn error, lanzarÃ¡ una excepciÃ³n.</body>
          </ownedComment>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_za6LQY4fEeqaUfD-UOeXhg" name="ControladorCurso">
        <ownedComment xmi:id="_zgoYxI4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
altas, bajas, modificaciones y consultas de cursos
 *
@author Confiencial</body>
        </ownedComment>
        <ownedAttribute xmi:id="_zgPXMY4fEeqaUfD-UOeXhg" name="dao" visibility="private" isStatic="true" type="_za6LQY4fEeqaUfD-UOeXhg" association="_zgtRQY4fEeqaUfD-UOeXhg">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_zgPXMo4fEeqaUfD-UOeXhg" value="new ControladorCurso ()"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zga9Y44fEeqaUfD-UOeXhg" name="insertarEnTablaCurso" specification="_zfuZ0I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zga9ZI4fEeqaUfD-UOeXhg" name="curso" type="_zecAYY4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;INSERT curso &quot;
                                         + &quot;VALUES (?,?)&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         stmt.setInt(1, curso.getCurso());
         stmt.setInt(2, curso.getActual());
         dataAccessObject.actualizar();
         dataAccessObject.close();
     } catch (SQLException ex) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en insertarEnTablaCurso&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zga9ZY4fEeqaUfD-UOeXhg" name="recuperarCursoActual" specification="_za6yVY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zga9Zo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int cursoActual;
     StringBuilder sql = new StringBuilder(&quot;SELECT Cod_CURSO &quot;
                                         + &quot;FROM curso &quot;
                                         + &quot;WHERE (actual = 1)&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         ResultSet rs = stmt.executeQuery();
         if (rs.next()) {
             cursoActual = rs.getInt(1);
             rs.close();
             dataAccessObject.close();
             return cursoActual;
         } else {
             rs.close();
             dataAccessObject.close();
             throw new RuntimeException(&quot;No se ha encontrado el curso actual&quot;);
         }
     }
     catch (SQLException ex) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema al consultar curso actual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zga9Z44fEeqaUfD-UOeXhg" name="eliminarCurso" specification="_za7ZYI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zga9aI4fEeqaUfD-UOeXhg" name="curso_actual">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM curso &quot;
                                         + &quot;WHERE (Cod_CURSO = ?)&quot;);

     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setInt(1, curso_actual);
         dataAccessObject.actualizar();
         dataAccessObject.close();
     } catch (SQLException e) {
         dataAccessObject.rollback();
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;Error en eliminarCurso&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zga9aY4fEeqaUfD-UOeXhg" name="nuevoCursoActual" specification="_za7ZYo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zga9ao4fEeqaUfD-UOeXhg" name="curso_actual">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;UPDATE CURSO &quot;
                                         + &quot;SET actual = 1 &quot;
                                         + &quot;WHERE (Cod_CURSO = ?)&quot;);

     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setInt(1, curso_actual);
         dataAccessObject.actualizar();
         dataAccessObject.close();
     } catch (SQLException e) {
         dataAccessObject.rollback();
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;Error en nuevoCursoActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zga9a44fEeqaUfD-UOeXhg" name="desactivarCursoActual" specification="_za7ZZI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zga9bI4fEeqaUfD-UOeXhg" name="curso_actual">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;UPDATE CURSO &quot;
                                         + &quot;SET actual = 0 &quot;
                                         + &quot;WHERE (Cod_CURSO = ?)&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setInt(1, curso_actual);
         dataAccessObject.actualizar();
         dataAccessObject.close();
     } catch (SQLException e) {
         dataAccessObject.rollback();
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;Error en desactivarCursoActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_za6yUI4fEeqaUfD-UOeXhg" name="ControladorCurso">
          <eAnnotations xmi:id="_za6yUY4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_za6yUo4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_za6yVI4fEeqaUfD-UOeXhg" type="_za6LQY4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_za6yVY4fEeqaUfD-UOeXhg" name="recuperarCursoActual" method="_zga9ZY4fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgoYxo4fEeqaUfD-UOeXhg">
            <body>MÃ©todo que, mediante una consulta sql a la Base de Datos, obtiene
     *  el cÃ³digo del curso actual y lo devuelve como resultado. En caso de
     *  que ocurra algÃºn error, se lanzarÃ¡ una excepciÃ³n.
     * 
     * @return Si la ejecuciÃ³n del mÃ©todo se realiza satisfactoriamente, devuelve
     *         el cÃ³digo de la convocatoria actual.
     *         Si no encuentra una convocatoria que satisfaga la condiciÃ³n de la
     *         consulta, lanzarÃ¡ una excepciÃ³n.
     *         Si ocurre algÃºn error, lanzarÃ¡ una excepciÃ³n.</body>
          </ownedComment>
          <ownedParameter xmi:id="_za6yVo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_za7ZYI4fEeqaUfD-UOeXhg" name="eliminarCurso" method="_zga9Z44fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgoYx44fEeqaUfD-UOeXhg">
            <body>MÃ©todo que elimina de la Base de Datos el curso recibido por parÃ¡metro.
     *
     * @param curso_actual curso que se quiere eliminar.</body>
          </ownedComment>
          <ownedParameter xmi:id="_za7ZYY4fEeqaUfD-UOeXhg" name="curso_actual">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_za7ZYo4fEeqaUfD-UOeXhg" name="nuevoCursoActual" method="_zga9aY4fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgoYyI4fEeqaUfD-UOeXhg">
            <body>MÃ©todo que actualiza, en la Base de Datos, el curso actual.
     *
     * @param curso_actual nuevo curso actual.</body>
          </ownedComment>
          <ownedParameter xmi:id="_za7ZY44fEeqaUfD-UOeXhg" name="curso_actual">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_za7ZZI4fEeqaUfD-UOeXhg" name="desactivarCursoActual" method="_zga9a44fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgoYyY4fEeqaUfD-UOeXhg">
            <body>MÃ©todo que desactiva en la Base de Datos el curso actual.
     *  Es decir, pone el flag &quot;actual&quot; a cero.
     *  OJO: el curso NO se elimina de la Base de Datos, sÃ³lo se desactiva
     *  su flag &quot;actual&quot;.
     *
     * @param curso_actual curso actual (que se va a desactivar).</body>
          </ownedComment>
          <ownedParameter xmi:id="_za7ZZY4fEeqaUfD-UOeXhg" name="curso_actual">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfuZ0I4fEeqaUfD-UOeXhg" name="insertarEnTablaCurso" method="_zga9Y44fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgoYxY4fEeqaUfD-UOeXhg">
            <body>MÃ©todo que se encarga de insertar los datos del curso en la Base de Datos
     * Si ocurre algÃºn error, lanzarÃ¡ una excepciÃ³n.
     *
     * @param curso contiene los datos del curso del que se quiere dar de alta.</body>
          </ownedComment>
          <ownedParameter xmi:id="_zfuZ0Y4fEeqaUfD-UOeXhg" name="curso" type="_zecAYY4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_za8AcI4fEeqaUfD-UOeXhg" name="ControladorEvaluacion">
        <ownedComment xmi:id="_zgoYyo4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
altas, bajas, modificaciones y consultas de evaluaciones.
 *
@author Confiencial</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgbkcI4fEeqaUfD-UOeXhg" name="actualizarNotasEvaluaciones" specification="_zfvA4I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgbkcY4fEeqaUfD-UOeXhg" name="resultado" type="_zej8MY4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>int tam = resultado.size();
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     try {
         for (int i = 0; i &lt; tam; i++){
             this.actualizarNotasEvaluacion(resultado.get(i), dataAccessObject);
         }
         dataAccessObject.close();
     } catch (RuntimeException e) {
         dataAccessObject.rollback();
         System.out.println(e.getMessage());
         throw new RuntimeException(e.getMessage());
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgbkco4fEeqaUfD-UOeXhg" name="actualizarNotasEvaluacion" specification="_zfwPAY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgbkc44fEeqaUfD-UOeXhg" name="evaluacion" type="_zecncY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgbkdI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;UPDATE EVALUACION &quot;
                                         + &quot;SET TIPO_EVALUACION_Ev_Continua = ?, &quot;
                                         + &quot;    PRACTICA_Cod_Practica = ?, &quot;
                                         + &quot;    EXAMEN_Cod_Ex = ?, &quot;
                                         + &quot;    Nota_Pr = ?, &quot;
                                         + &quot;    Nota_Ev_C = ?, &quot;
                                         + &quot;    Nota_P1 = ?, &quot;
                                         + &quot;    Nota_P2 = ?, &quot;
                                         + &quot;    Nota_P3 = ?, &quot;
                                         + &quot;    Nota_P4 = ?, &quot;
                                         + &quot;    Nota_Final = ?, &quot;
                                         + &quot;    Practica_convalidada = ?, &quot;
                                         + &quot;    Examen_convalidado = ? &quot;
                                         + &quot;WHERE (Cod_Evaluacion = ?) &quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setBoolean(1, evaluacion.getEs_Ev_Continua());
         stmt.setString(2, evaluacion.getCod_Practica());
         stmt.setString(3, evaluacion.getCod_Examen());
         stmt.setFloat(4, evaluacion.getNota_Practica());
         stmt.setFloat(5, evaluacion.getNota_Ev_C());
         stmt.setFloat(6, evaluacion.getNota_P1());
         stmt.setFloat(7, evaluacion.getNota_P2());
         stmt.setFloat(8, evaluacion.getNota_P3());
         stmt.setFloat(9, evaluacion.getNota_P4());
         stmt.setFloat(10, evaluacion.getNota_Final());
         stmt.setBoolean(11, evaluacion.getPracticaConvalidada());
         stmt.setBoolean(12, evaluacion.getExamenConvalidado());
         stmt.setInt(13, evaluacion.codEvaluacion());

         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException (&quot;Problema en actualizarNotasEvaluacion&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgcLgI4fEeqaUfD-UOeXhg" name="intertarEnTablaEvaluacion" specification="_zfwPBI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgcLgY4fEeqaUfD-UOeXhg" name="evaluacion" type="_zecncY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgcLgo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;INSERT EVALUACION (Cod_Evaluacion, &quot;
                                                            + &quot;ALUMNO_DNI, &quot;
                                                            + &quot;TIPO_EVALUACION_Ev_Continua, &quot;
                                                            + &quot;PRACTICA_Cod_Practica, &quot;
                                                            + &quot;EXAMEN_Cod_Ex, &quot;
                                                            + &quot;Nota_Pr, &quot;
                                                            + &quot;Nota_Ev_C, &quot;
                                                            + &quot;Nota_P1, &quot;
                                                            + &quot;Nota_P2, &quot;
                                                            + &quot;Nota_P3, &quot;
                                                            + &quot;Nota_P4, &quot;
                                                            + &quot;Nota_Final, &quot;
                                                            + &quot;CURSO_Cod_CURSO, &quot;
                                                            + &quot;CONVOCATORIA_idCONVOCATORIA, &quot;
                                                            + &quot;Practica_convalidada, &quot;
                                                            + &quot;Examen_convalidado) &quot;
                                         + &quot;VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)&quot;);

     List&lt;Object> values = new ArrayList&lt;Object>();
     values.add(evaluacion.getNuevoCodEvaluacion());
     values.add(evaluacion.getDNI());
     values.add(evaluacion.getEs_Ev_Continua());
     values.add(evaluacion.getCod_Practica());
     values.add(evaluacion.getCod_Examen());
     values.add(evaluacion.getNota_Practica());
     values.add(evaluacion.getNota_Ev_C());
     values.add(evaluacion.getNota_P1());
     values.add(evaluacion.getNota_P2());
     values.add(evaluacion.getNota_P3());
     values.add(evaluacion.getNota_P4());
     values.add(evaluacion.getNota_Final());
     values.add(evaluacion.getCod_Curso());
     values.add(evaluacion.getCod_Convocatoria());
     values.add(evaluacion.getPracticaConvalidada());
     values.add(evaluacion.getExamenConvalidado());

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         int i=0;
         for (Object valor: values) {
             if (valor instanceof String){
                 stmt.setString(++i, (String)valor);
             }
             if (valor instanceof Float){
                 stmt.setFloat(++i, (Float)valor);
             }
             if (valor instanceof Integer){
                 stmt.setInt(++i, (Integer)valor);
             }
             if (valor instanceof Boolean){
                 stmt.setBoolean(++i, (Boolean)valor);
             }   
         }

         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e) {
         throw new RuntimeException(&quot;Problema en insertarEnTablaEvaluacion&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgcLg44fEeqaUfD-UOeXhg" name="eliminarEvaluacionesConvocatoriaActual" specification="_zeviYI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgcLhI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM evaluacion &quot;
                                         + &quot;WHERE ((CURSO_Cod_CURSO = ?) &quot;
                                         + &quot;AND (CONVOCATORIA_idCONVOCATORIA = ?))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try{
         Convocatoria convocatoria = new Convocatoria();
         Curso curso = new Curso();
         stmt.setInt(1, curso.getCursoActual());
         stmt.setString(2, convocatoria.getConvocatoriaActual());
         dataAccessObject.actualizar();
         stmt.close();
     }
     catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException(&quot;Problema en eliminarEvaluacionesConvocatoriaActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgcLhY4fEeqaUfD-UOeXhg" name="estaDadaDeAlta" specification="_zfw2EY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgcLho4fEeqaUfD-UOeXhg" name="evaluacion" type="_zecncY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgcLh44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgcLiI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(
                  &quot;SELECT * &quot;
                + &quot;FROM evaluacion &quot;
                + &quot;WHERE ((ALUMNO_DNI = ?) AND (CURSO_Cod_CURSO = ?) &quot;
                + &quot;AND (CONVOCATORIA_idCONVOCATORIA = ?))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try{
         stmt.setString(1, evaluacion.getDNI());
         stmt.setInt(2, evaluacion.getCod_Curso());
         stmt.setString(3, evaluacion.getCod_Convocatoria());
         ResultSet rs = stmt.executeQuery();

         boolean ok = rs.next();
         stmt.close();

         return ok;
     }
     catch (SQLException ex) {
         throw new RuntimeException(&quot;Problema al comprobar que la evaluacion esta dada de alta&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgcLiY4fEeqaUfD-UOeXhg" name="recuperarUltimoCodEvaluacion" specification="_za9OkI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgcLio4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int ultimo_cod = 0;
     StringBuilder sql = new StringBuilder (
                  &quot;SELECT Cod_Evaluacion &quot;
                + &quot;FROM evaluacion &quot;
                + &quot;WHERE (Cod_Evaluacion >= ALL (SELECT Cod_Evaluacion&quot;
                                             + &quot; FROM evaluacion))&quot;);

     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     
     try {
         ResultSet rs = stmt.executeQuery();
         

         if (rs.next()) {
             ultimo_cod = rs.getInt(1);
         }
         rs.close();
         dataAccessObject.close();
         return ultimo_cod;
     }
     catch (SQLException ex) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema al consultar la clave de la Ãºltima evaluaciÃ³n&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgcLi44fEeqaUfD-UOeXhg" name="tieneExamenAprobado" specification="_zewJcI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgcLjI4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcLjY4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcLjo4fEeqaUfD-UOeXhg" name="convocatoria_anterior">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcLj44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgcLkI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean ok;
     StringBuilder sql = new StringBuilder (
                     &quot;SELECT * &quot;
                   + &quot;FROM evaluacion &quot;
                   + &quot;WHERE ((ALUMNO_DNI = ?) AND (CURSO_Cod_CURSO = ?) &quot;
                   + &quot;AND (CONVOCATORIA_idCONVOCATORIA = ?) &quot;
                   + &quot;AND ((Nota_P1 + Nota_P2 + Nota_P3 + Nota_P4) >= 5))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, dni_alumno);
         stmt.setInt(2, curso);
         stmt.setString(3, convocatoria_anterior);

         ResultSet rs = stmt.executeQuery();
         ok = rs.next();
         rs.close();
         stmt.close();
         return ok;
     }
     catch (SQLException ex) {
  //          dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema al comprobar que el alumno&quot;
                            + &quot;tiene el examen aprobado en al conv. anterior&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgcLkY4fEeqaUfD-UOeXhg" name="tienePracticaAprobada" specification="_zexXkI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgcLko4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcLk44fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcLlI4fEeqaUfD-UOeXhg" name="convocatoria_anterior">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcLlY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgcLlo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean ok;
     StringBuilder sql = new StringBuilder (
                     &quot;SELECT * &quot;
                   + &quot;FROM evaluacion &quot;
                   + &quot;WHERE ((ALUMNO_DNI = ?) AND (CURSO_Cod_CURSO = ?) &quot;
                   + &quot;AND (CONVOCATORIA_idCONVOCATORIA = ?) &quot;
                   + &quot;AND (Nota_Pr >= 5))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, dni_alumno);
         stmt.setInt(2, curso);
         stmt.setString(3, convocatoria_anterior);

         ResultSet rs = stmt.executeQuery();
         ok = rs.next();
         rs.close();
         stmt.close();
         return ok;
     }
     catch (SQLException ex) {
  //          dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema al comprobar que el alumno&quot;
                            + &quot;tiene la prÃ¡ctica aprobada en al conv. anterior&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgcykI4fEeqaUfD-UOeXhg" name="obtenerNotaPiExamen" specification="_zeylsI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgcykY4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcyko4fEeqaUfD-UOeXhg" name="num_problema">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcyk44fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcylI4fEeqaUfD-UOeXhg" name="convocatoria_anterior">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcylY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgcylo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
          </ownedParameter>
          <language>java</language>
          <body>float nota = 0;
     StringBuilder sql = new StringBuilder(
             &quot;SELECT Nota_P1, Nota_P2, Nota_P3, Nota_P4 &quot;
           + &quot;FROM evaluacion &quot;
           + &quot;WHERE ((ALUMNO_DNI = ?) AND (CURSO_Cod_CURSO = ?) &quot;
                   + &quot;AND (CONVOCATORIA_idCONVOCATORIA = ?)&quot;
                   + &quot;AND ((Nota_P1 + Nota_P2 + Nota_P3 + Nota_P4) >= 5))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, dni_alumno);
         stmt.setInt(2, curso);
         stmt.setString(3, convocatoria_anterior);

         ResultSet rs = stmt.executeQuery();

         if (rs.next()) {
             nota = rs.getFloat(num_problema);
			}
             rs.close();
             stmt.close();
             return nota;
     }
     catch (SQLException ex) {
//            dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema al obtener la nota de un problema del examen&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgcyl44fEeqaUfD-UOeXhg" name="obtenerNotaPractica" specification="_zezMwI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgcymI4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcymY4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcymo4fEeqaUfD-UOeXhg" name="convocatoria">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcym44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgcynI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
          </ownedParameter>
          <language>java</language>
          <body>float nota = 0;
     StringBuilder sql = new StringBuilder(
             &quot;SELECT Nota_Pr &quot;
           + &quot;FROM evaluacion &quot;
           + &quot;WHERE ((ALUMNO_DNI = ?) AND (CURSO_Cod_CURSO = ?) &quot;
                   + &quot;AND (CONVOCATORIA_idCONVOCATORIA = ?)&quot;
                   + &quot;AND (Nota_Pr >= 5))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, dni_alumno);
         stmt.setInt(2, curso);
         stmt.setString(3, convocatoria);

         ResultSet rs = stmt.executeQuery();

         if (rs.next()) {
             nota = rs.getFloat(1);
			}
             rs.close();
             stmt.close();
             return nota;
     }
     catch (SQLException ex) {
//            dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema al obtener la nota de la prÃ¡ctica&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgcynY4fEeqaUfD-UOeXhg" name="actualizarPracticaEnTablaEvaluacion" specification="_zfw2FY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgcyno4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgcyn44fEeqaUfD-UOeXhg" name="cod_grupo_practica">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcyoI4fEeqaUfD-UOeXhg" name="nota">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgcyoY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;UPDATE EVALUACION &quot;
                                         + &quot;SET GRUPO_PRACTICA_Cod_GP = ?,&quot;
                                         + &quot;    Nota_Pr = ? &quot;
                                         + &quot;WHERE ((ALUMNO_DNI = ?)&quot;
                                         + &quot;  AND (CURSO_Cod_CURSO = ?)&quot;
                                         + &quot;  AND (CONVOCATORIA_idCONVOCATORIA = ?))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     Curso curso = new Curso ();
     Convocatoria convocatoria = new Convocatoria();
     try {
         stmt.setInt(1, cod_grupo_practica);
         stmt.setFloat(2, nota);
         stmt.setString(3, alumno.getDNI());
         stmt.setInt(4, curso.getCursoActual());
         stmt.setString(5, convocatoria.getConvocatoriaActual());

         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException ex) {
         throw new RuntimeException (&quot;Problema en actualizarPracticaEnTablaEvaluacion&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgdZoI4fEeqaUfD-UOeXhg" name="borrarEnTablaEvaluacion" specification="_zezz0Y4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgdZoY4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgdZoo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM evaluacion &quot;
                                         + &quot;WHERE (ALUMNO_DNI = ?)&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, dni);
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e1) {
//            dataAccessObject.rollback();
         throw new RuntimeException(&quot;problema al eliminar en evaluacion&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgdZo44fEeqaUfD-UOeXhg" name="borrarGrupoPracticaEnTablaEvaluacion" specification="_ze0a4Y4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgdZpI4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgdZpY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>System.out.println(&quot;Estoy en borrarGrupoPracticaEnTablaEvaluacion&quot;);
     StringBuilder sql = new StringBuilder(&quot;UPDATE EVALUACION &quot;
                                         + &quot;SET GRUPO_PRACTICA_Cod_GP = null,&quot;
                                         + &quot;    Nota_Pr = 0 &quot;
                                         + &quot;WHERE ((CURSO_Cod_CURSO = ?) &quot;
                                         + &quot;   AND (CONVOCATORIA_idCONVOCATORIA = ?)&quot;
                                         + &quot;   AND (ALUMNO_DNI = ?))&quot;);

     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();
         PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
         stmt.setInt(1, curso.getCursoActual());
         stmt.setString(2, convocatoria.getConvocatoriaActual());
         stmt.setString(3, dni);
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e) {
         System.out.println(&quot;borrarGrupoPracticaEnTablaEvaluacion&quot;);
         throw new RuntimeException(&quot;Error al actualizar la Base de Datos.&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgdZpo4fEeqaUfD-UOeXhg" name="estaRegistradoGrupoPractica" specification="_zfxdI44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgdZp44fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgdZqI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM evaluacion &quot;
                                         + &quot;WHERE ((GRUPO_PRACTICA_Cod_GP = ?) &quot;
                                          + &quot; AND (CURSO_Cod_CURSO = ?) &quot;
                                          + &quot; AND (CONVOCATORIA_idCONVOCATORIA = ?))&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();

         stmt.setInt(1, grupo.getCodGrupoPractica());
         stmt.setString(2, curso.getCursoActualEnString());
         stmt.setString(3, convocatoria.getConvocatoria());

         ResultSet rs = stmt.executeQuery();

         boolean ok = rs.next();
         dataAccessObject.close();
         rs.close();
         return ok;
     } catch (SQLException e) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en estaRegistradoGrupoPractica de evaluacion&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgdZqY4fEeqaUfD-UOeXhg" name="alumnoTieneGrupoPractica" specification="_zfyrQI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgdZqo4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgdZq44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgdZrI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot; SELECT GRUPO_PRACTICA_Cod_GP &quot;
                                         + &quot; FROM evaluacion &quot;
                                         + &quot; WHERE ((ALUMNO_DNI = ?) &quot;
                                             + &quot; AND (CURSO_Cod_CURSO = ?) &quot;
                                             + &quot; AND (CONVOCATORIA_idCONVOCATORIA = ?))&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();

         stmt.setString(1, alumno.getDNI());
         stmt.setInt(2, curso.getCursoActual());
         stmt.setString(3, convocatoria.getConvocatoriaActual());

         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         System.out.println(ok);
         int cod_grupo = rs.getInt(1);
         System.out.println(cod_grupo);
         rs.close();
         stmt.close();

         return (cod_grupo != 0);
     } catch (SQLException e) {
         throw new RuntimeException (&quot; Ha ocurrido un error al comprobar el si el alumno &quot;
                                    +&quot;ya tiene un grupo de prÃ¡cticas asignado&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgeAsI4fEeqaUfD-UOeXhg" name="obtenerCodExamenAprobado" specification="_ze1pAI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgeAsY4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAso4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAs44fEeqaUfD-UOeXhg" name="convocatoria_anterior">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAtI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgeAtY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot; SELECT EXAMEN_Cod_Ex &quot;
                                         + &quot; FROM evaluacion &quot;
                                         + &quot; WHERE ((ALUMNO_DNI = ?) &quot;
                                             + &quot; AND (CURSO_Cod_CURSO = ?) &quot;
                                             + &quot; AND (CONVOCATORIA_idCONVOCATORIA = ?))&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, dni_alumno);
         stmt.setInt(2, curso);
         stmt.setString(3, convocatoria_anterior);

         ResultSet rs = stmt.executeQuery();
         String resultado;
         if (rs.next()) {
             resultado = rs.getString(1);
         } else {
             resultado = null;
         }
         
         stmt.close();
         rs.close();
         return  resultado;
     } catch (SQLException e) {
         System.out.println(e.getMessage());
         throw new RuntimeException (&quot; Ha ocurrido un error al comprobar el cÃ³digo&quot;
                                   + &quot; del examen convalidado&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgeAto4fEeqaUfD-UOeXhg" name="obtenerCodPracticaAprobada" specification="_ze2QEY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgeAt44fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAuI4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAuY4fEeqaUfD-UOeXhg" name="convocatoria_anterior">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAuo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgeAu44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot; SELECT PRACTICA_Cod_Practica &quot;
                                         + &quot; FROM evaluacion &quot;
                                         + &quot; WHERE ((ALUMNO_DNI = ?) &quot;
                                             + &quot; AND (CURSO_Cod_CURSO = ?) &quot;
                                             + &quot; AND (CONVOCATORIA_idCONVOCATORIA = ?))&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, dni_alumno);
         stmt.setInt(2, curso);
         stmt.setString(3, convocatoria_anterior);

         ResultSet rs = stmt.executeQuery();

         String resultado;

         if (rs.next()) {
             resultado = rs.getString(1);
         } else {
             resultado = null;
         }
         stmt.close();
         rs.close();
         return  resultado;
     } catch (SQLException e) {
         throw new RuntimeException (&quot; Ha ocurrido un error al comprobar el cÃ³digo&quot;
                                   + &quot; de la prÃ¡ctica convalidada&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgeAvI4fEeqaUfD-UOeXhg" name="realizarConsultarEvaluacion" specification="_za_q0I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgeAvY4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAvo4fEeqaUfD-UOeXhg" name="n_mat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAv44fEeqaUfD-UOeXhg" name="grupo_clase">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAwI4fEeqaUfD-UOeXhg" name="convocatoria">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAwY4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAwo4fEeqaUfD-UOeXhg" type="_zeayQI4fEeqaUfD-UOeXhg" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_zgeAw44fEeqaUfD-UOeXhg" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean filtro_curso = false;
     boolean filtro_convocatoria = false;
     StringBuilder sql = new StringBuilder(&quot;SELECT evaluacion.Cod_Evaluacion, &quot;
                                               + &quot; evaluacion.ALUMNO_DNI, &quot;
                                               + &quot; evaluacion.TIPO_EVALUACION_Ev_Continua, &quot;
                                               + &quot; evaluacion.Nota_Pr, &quot;
                                               + &quot; evaluacion.Nota_Ev_C, &quot;
                                               + &quot; evaluacion.Nota_P1, &quot;
                                               + &quot; evaluacion.Nota_P2, &quot;
                                               + &quot; evaluacion.Nota_P3, &quot;
                                               + &quot; evaluacion.Nota_P4, &quot;
                                               + &quot; evaluacion.Nota_Final, &quot;
                                               + &quot; evaluacion.Practica_convalidada, &quot;
                                               + &quot; evaluacion.Examen_convalidado, &quot;
                                               + &quot; evaluacion.CONVOCATORIA_idCONVOCATORIA, &quot;
                                               + &quot; evaluacion.CURSO_Cod_CURSO, &quot;
                                               + &quot; evaluacion.EXAMEN_Cod_Ex, &quot;
                                               + &quot; evaluacion.PRACTICA_Cod_Practica, &quot;
                                               + &quot; alumno.N_Mat &quot;
                                         + &quot;FROM evaluacion, alumno, matricula &quot;
                                         + &quot;WHERE ((evaluacion.ALUMNO_DNI = alumno.DNI) &quot;
                                         + &quot; AND (evaluacion.ALUMNO_DNI = matricula.ALUMNO_DNI) &quot;
                                         + &quot; AND (evaluacion.CURSO_Cod_CURSO = matricula.CURSO_Cod_CURSO) &quot;);


     List&lt;Object> values = new ArrayList&lt;Object>();
     List&lt;ListadoEvaluacion> resultado = new ArrayList&lt;ListadoEvaluacion>();


     if (this.noEstaVacio(convocatoria)) {
         filtro_convocatoria = true;
         sql.append(&quot; AND (evaluacion.CONVOCATORIA_idCONVOCATORIA = ?) &quot;);
         values.add(convocatoria);            
     }

     if (curso != -1) {
         filtro_curso = true;
         sql.append( &quot; AND (evaluacion.CURSO_Cod_CURSO = ?) &quot;);
         values.add(curso);
     }

     if (this.noEstaVacio(dni)) {
         sql.append(&quot; AND (evaluacion.ALUMNO_DNI = ?) &quot;);
         values.add(dni);
     }

     if (this.noEstaVacio(n_mat)) {
         sql.append(&quot; AND (evaluacion.ALUMNO_DNI = (SELECT DNI &quot;
                                                + &quot; FROM alumno &quot;
                                                + &quot; WHERE (N_Mat = ?))) &quot;);
         values.add(n_mat);
     }

     if (this.noEstaVacio(grupo_clase)) {
         sql.append(&quot; AND (evaluacion.ALUMNO_DNI IN (SELECT ALUMNO_DNI &quot;
                                                  +&quot; FROM matricula &quot;
                                                  +&quot; WHERE (matricula.GRUPO_CLASE_Cod_GC = ?))) &quot;);
         values.add(grupo_clase);
     }

     sql.append(&quot; ) &quot;);
     sql.append(&quot; ORDER BY &quot;);

     
     if (!filtro_curso){
         sql.append(&quot; CURSO_Cod_CURSO DESC, &quot;);
     }

     if (!filtro_convocatoria) {
         sql.append(&quot; CONVOCATORIA_idCONVOCATORIA DESC, &quot;);
     }

     sql.append(&quot; alumno.N_Mat ASC &quot;);

     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         System.out.println(sql.toString());
         int i=0;
         for (Object valor: values) {
             if (valor instanceof Integer) {
                 stmt.setInt(++i, (Integer)valor);
             }

             if (valor instanceof String) {
                 stmt.setString(++i, (String)valor);
             }
         }
         ResultSet rs = stmt.executeQuery();
         boolean ev_continua;
         Alumno alumno;
         Evaluacion evaluacion;
         while (rs.next()) {
             alumno = new Alumno(rs.getString(2));
             alumno.obtenerDatosAlumno(dataAccessObject);

             ev_continua = (rs.getInt(3) == 1);
             evaluacion = new Evaluacion (rs.getInt(1), rs.getString(2),
                                          rs.getString(17), ev_continua,
                                          rs.getFloat(4), rs.getFloat(5),
                                          rs.getFloat(6), rs.getFloat(7),
                                          rs.getFloat(8), rs.getFloat(9),
                                          rs.getFloat(10), rs.getBoolean(11),
                                          rs.getBoolean(12), rs.getString(13),
                                          rs.getInt(14), rs.getString(15),
                                          rs.getString(16));
             resultado.add(new ListadoEvaluacion(alumno, evaluacion));
         }
         rs.close();
         dataAccessObject.close();
         return resultado;
     } catch (SQLException e1) {
         dataAccessObject.rollback();
         System.out.println(e1.getMessage());
         throw new RuntimeException(&quot;Problema en realizarConsultaEvaluacion&quot;);
     } catch (RuntimeException e2) {
         dataAccessObject.rollback();
         System.out.println(e2.getMessage());
         throw new RuntimeException(&quot;Problema en realizarConsultaEvaluacion&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgeAxI4fEeqaUfD-UOeXhg" name="noEstaVacio" specification="_zbAR4o4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgeAxY4fEeqaUfD-UOeXhg" name="cadena">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgeAxo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return cadena != null &amp;&amp; !&quot;&quot;.equals(cadena);
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_za8ngI4fEeqaUfD-UOeXhg" name="ControladorEvaluacion">
          <eAnnotations xmi:id="_za8ngY4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_za8ngo4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_za8nhI4fEeqaUfD-UOeXhg" type="_za8AcI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_za9OkI4fEeqaUfD-UOeXhg" name="recuperarUltimoCodEvaluacion" method="_zgcLiY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_za91oI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_za_q0I4fEeqaUfD-UOeXhg" name="realizarConsultarEvaluacion" method="_zgeAvI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_za_q0Y4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_za_q0o4fEeqaUfD-UOeXhg" name="n_mat">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_za_q044fEeqaUfD-UOeXhg" name="grupo_clase">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_za_q1I4fEeqaUfD-UOeXhg" name="convocatoria">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_za_q1Y4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zbAR4I4fEeqaUfD-UOeXhg" type="_zeayQI4fEeqaUfD-UOeXhg" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_zbAR4Y4fEeqaUfD-UOeXhg" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zbAR4o4fEeqaUfD-UOeXhg" name="noEstaVacio" method="_zgeAxI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zbA48I4fEeqaUfD-UOeXhg" name="cadena">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zbA48Y4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zeviYI4fEeqaUfD-UOeXhg" name="eliminarEvaluacionesConvocatoriaActual" method="_zgcLg44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zeviYY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zewJcI4fEeqaUfD-UOeXhg" name="tieneExamenAprobado" method="_zgcLi44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zewJcY4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zewJco4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zewJc44fEeqaUfD-UOeXhg" name="convocatoria_anterior">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zewJdI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zewJdY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zexXkI4fEeqaUfD-UOeXhg" name="tienePracticaAprobada" method="_zgcLkY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zexXkY4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zex-oI4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zex-oY4fEeqaUfD-UOeXhg" name="convocatoria_anterior">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zex-oo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zex-o44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zeylsI4fEeqaUfD-UOeXhg" name="obtenerNotaPiExamen" method="_zgcykI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zeylsY4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zeylso4fEeqaUfD-UOeXhg" name="num_problema">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zeyls44fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zeyltI4fEeqaUfD-UOeXhg" name="convocatoria_anterior">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zeyltY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zeylto4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zezMwI4fEeqaUfD-UOeXhg" name="obtenerNotaPractica" method="_zgcyl44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zezMwY4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zezMwo4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zezMw44fEeqaUfD-UOeXhg" name="convocatoria">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zezMxI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zezz0I4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zezz0Y4fEeqaUfD-UOeXhg" name="borrarEnTablaEvaluacion" method="_zgdZoI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zezz0o4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_ze0a4I4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_ze0a4Y4fEeqaUfD-UOeXhg" name="borrarGrupoPracticaEnTablaEvaluacion" method="_zgdZo44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_ze0a4o4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_ze0a444fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_ze1pAI4fEeqaUfD-UOeXhg" name="obtenerCodExamenAprobado" method="_zgeAsI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_ze1pAY4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_ze1pAo4fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_ze1pA44fEeqaUfD-UOeXhg" name="convocatoria_anterior">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_ze1pBI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_ze2QEI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_ze2QEY4fEeqaUfD-UOeXhg" name="obtenerCodPracticaAprobada" method="_zgeAto4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_ze2QEo4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_ze2QE44fEeqaUfD-UOeXhg" name="curso">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_ze2QFI4fEeqaUfD-UOeXhg" name="convocatoria_anterior">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_ze2QFY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_ze23II4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfvA4I4fEeqaUfD-UOeXhg" name="actualizarNotasEvaluaciones" method="_zgbkcI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfvA4Y4fEeqaUfD-UOeXhg" name="resultado" type="_zej8MY4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfwPAY4fEeqaUfD-UOeXhg" name="actualizarNotasEvaluacion" method="_zgbkco4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfwPAo4fEeqaUfD-UOeXhg" name="evaluacion" type="_zecncY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfwPA44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfwPBI4fEeqaUfD-UOeXhg" name="intertarEnTablaEvaluacion" method="_zgcLgI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfwPBY4fEeqaUfD-UOeXhg" name="evaluacion" type="_zecncY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfw2EI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfw2EY4fEeqaUfD-UOeXhg" name="estaDadaDeAlta" method="_zgcLhY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfw2Eo4fEeqaUfD-UOeXhg" name="evaluacion" type="_zecncY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfw2E44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfw2FI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfw2FY4fEeqaUfD-UOeXhg" name="actualizarPracticaEnTablaEvaluacion" method="_zgcynY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfw2Fo4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfxdII4fEeqaUfD-UOeXhg" name="cod_grupo_practica">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfxdIY4fEeqaUfD-UOeXhg" name="nota">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfxdIo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfxdI44fEeqaUfD-UOeXhg" name="estaRegistradoGrupoPractica" method="_zgdZpo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfyEMI4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfyEMY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfyrQI4fEeqaUfD-UOeXhg" name="alumnoTieneGrupoPractica" method="_zgdZqY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfyrQY4fEeqaUfD-UOeXhg" name="alumno" type="_zebZUY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfyrQo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfzSUI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_zbI0wI4fEeqaUfD-UOeXhg" name="ControladorExamen">
        <ownedComment xmi:id="_zgo_0I4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
 altas, bajas, modificaciones y consultas de los exÃ¡menes.
 *
@author Confiencial</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgenwI4fEeqaUfD-UOeXhg" name="darAltaNuevoCodExamen" specification="_zbLRAY4fEeqaUfD-UOeXhg">
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;INSERT examen &quot;
                                         + &quot;VALUES (?)&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();
         String nuevo_cod_practica = convocatoria.getConvocatoriaActual()+
                                     Integer.toString(curso.getCursoActual());
         stmt.setString(1, nuevo_cod_practica);
         dataAccessObject.actualizar();
         dataAccessObject.close();
     } catch (SQLException ex) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en darAltaNuevoCodExamen&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgenwY4fEeqaUfD-UOeXhg" name="bajaCodExamenConvocatoriaActual" specification="_ze5TYI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgenwo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM examen &quot;
                                         + &quot;WHERE (Cod_Ex = ?) &quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();
         String cod_examen_convocatoria_actual = convocatoria.getConvocatoriaActual()+
                                                 Integer.toString(curso.getCursoActual());
         stmt.setString(1, cod_examen_convocatoria_actual);
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException(&quot;Problema en bajaCodExamenConvocatoriaActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_zbKC4I4fEeqaUfD-UOeXhg" name="ControladorExamen">
          <eAnnotations xmi:id="_zbKp8I4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_zbKp8Y4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_zbLRAI4fEeqaUfD-UOeXhg" type="_zbI0wI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zbLRAY4fEeqaUfD-UOeXhg" name="darAltaNuevoCodExamen" method="_zgenwI4fEeqaUfD-UOeXhg"/>
        <ownedOperation xmi:id="_ze5TYI4fEeqaUfD-UOeXhg" name="bajaCodExamenConvocatoriaActual" method="_zgenwY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_ze5TYY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_zbL4EI4fEeqaUfD-UOeXhg" name="ControladorGrupoClase">
        <ownedComment xmi:id="_zgo_0Y4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
altas, bajas, modificaciones y consultas de grupos de clase.
 *
@author Confiencial</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgenw44fEeqaUfD-UOeXhg" name="estaDadoDeAlta" specification="_zfz5YI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgenxI4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgenxY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgenxo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM grupo_clase &quot;
                                         + &quot; WHERE ((Cod_GC = ?))&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try{
         stmt.setString(1, grupo_clase.getCodGrupoClase());

         ResultSet rs = stmt.executeQuery();

         boolean ok = rs.next();
         rs.close();
         return ok;
     }
     catch (SQLException ex) {
         throw new RuntimeException(&quot;Problema al comprobar que el grupo de clase &quot;
                                  + &quot;estÃ¡ dado de alta&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgenx44fEeqaUfD-UOeXhg" name="darAltaGrupoClase" specification="_zf0gco4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgenyI4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgenyY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>this.insertarEnTablaGrupoClase(grupo_clase, dataAccessObject);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgfO0I4fEeqaUfD-UOeXhg" name="insertarEnTablaGrupoClase" specification="_zf0gdY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgfO0Y4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgfO0o4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;INSERT GRUPO_CLASE &quot;
                                         + &quot;VALUES (?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try{
         stmt.setString(1, grupo_clase.getCodGrupoClase());
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e) {
         throw new RuntimeException(&quot;Problema en insertarEnTablaGrupoClase&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_zbMfII4fEeqaUfD-UOeXhg" name="ControladorGrupoClase">
          <eAnnotations xmi:id="_zbMfIY4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_zbMfIo4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_zbNGMY4fEeqaUfD-UOeXhg" type="_zbL4EI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfz5YI4fEeqaUfD-UOeXhg" name="estaDadoDeAlta" method="_zgenw44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfz5YY4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf0gcI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf0gcY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zf0gco4fEeqaUfD-UOeXhg" name="darAltaGrupoClase" method="_zgenx44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf0gc44fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf0gdI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf0gdY4fEeqaUfD-UOeXhg" name="insertarEnTablaGrupoClase" method="_zgfO0I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf0gdo4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf1HgI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_zbOUUI4fEeqaUfD-UOeXhg" name="ControladorPractica">
        <ownedComment xmi:id="_zgpm4I4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
 altas, bajas, modificaciones y consultas de las prÃ¡cticas.
 *
@author Confiencial</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgfO044fEeqaUfD-UOeXhg" name="darAltaNuevoCodPractica" specification="_zbO7ZI4fEeqaUfD-UOeXhg">
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;INSERT practica &quot;
                                         + &quot;VALUES (?)&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();
         String nuevo_cod_practica = convocatoria.getConvocatoriaActual()+
                                     Integer.toString(curso.getCursoActual());
         stmt.setString(1, nuevo_cod_practica);
         dataAccessObject.actualizar();
         dataAccessObject.close();
     } catch (SQLException ex) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en darAltaNuevoCodPractica&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgfO1I4fEeqaUfD-UOeXhg" name="bajaCodPracticaConvocatoriaActual" specification="_ze56cI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgfO1Y4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM practica &quot;
                                         + &quot;WHERE (Cod_Practica = ?) &quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();
         String cod_practica_convocatoria_actual = convocatoria.getConvocatoriaActual()+
                                                   Integer.toString(curso.getCursoActual());
         stmt.setString(1, cod_practica_convocatoria_actual);
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException(&quot;Problema en bajaCodPracticaConvocatoriaActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_zbOUUY4fEeqaUfD-UOeXhg" name="ControladorPractica">
          <eAnnotations xmi:id="_zbO7YI4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_zbO7YY4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_zbO7Y44fEeqaUfD-UOeXhg" type="_zbOUUI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zbO7ZI4fEeqaUfD-UOeXhg" name="darAltaNuevoCodPractica" method="_zgfO044fEeqaUfD-UOeXhg"/>
        <ownedOperation xmi:id="_ze56cI4fEeqaUfD-UOeXhg" name="bajaCodPracticaConvocatoriaActual" method="_zgfO1I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_ze56cY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_zbPicI4fEeqaUfD-UOeXhg" name="ControladorMatricula">
        <ownedComment xmi:id="_zgpm4Y4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
 altas, bajas, modificaciones y consultas de matrÃ­culas de alumnos.
 *
@author Confiencial</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgfO1o4fEeqaUfD-UOeXhg" name="recuperarUltimoCodMatricula" specification="_zbQJhY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgfO144fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder (
                  &quot;SELECT Cod_MATRICULA &quot;
                + &quot;FROM matricula &quot;
                + &quot;WHERE (Cod_MATRICULA >= ALL (SELECT Cod_MATRICULA&quot;
                                            + &quot; FROM matricula))&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         ResultSet rs = stmt.executeQuery();
         int ultimo_cod;
         if (rs.next()) {
             ultimo_cod = rs.getInt(1);
         } else {
             ultimo_cod = 0;
            }

         rs.close();
         dataAccessObject.close();
         return ultimo_cod;
     }
     catch (SQLException ex) {
         dataAccessObject.rollback();
         System.out.println(&quot;Problema al consultar la clave de la Ãºltima matricula&quot;);
     }
     return -1;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgfO2I4fEeqaUfD-UOeXhg" name="insertarEnTablaMatricula" specification="_zf1HgY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgfO2Y4fEeqaUfD-UOeXhg" name="matricula" type="_zed1kY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgfO2o4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>try {
         GrupoClase grupo_clase = new GrupoClase (matricula.getGrupo_Clase());
         grupo_clase.validarGrupoClase(dataAccessObject);
     } catch (RuntimeException e){
         throw new RuntimeException(&quot;Error al dar de alta el grupo de clase&quot;);
     }
     

     StringBuilder sql = new StringBuilder(&quot;INSERT matricula VALUES (?,?,?,?)&quot;);
        
     try {
         PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
         stmt.setInt(1, matricula.getNuevoCodMatricula());
         stmt.setString(2, matricula.getDNI());
         stmt.setString(3, matricula.getGrupo_Clase());
         stmt.setInt(4, matricula.getCod_Curso());

         dataAccessObject.actualizar();
         stmt.close();
         } catch (SQLException ex) {
         throw new RuntimeException(&quot;problema en darAltaMatricula&quot;);
         }       
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgfO244fEeqaUfD-UOeXhg" name="eliminarMatriculasCursoActual" specification="_ze7IkI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgfO3I4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM matricula &quot;
                                         + &quot;WHERE (CURSO_Cod_CURSO = ?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         Curso curso = new Curso();
         stmt.setInt(1, curso.getCursoActual());
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e) {
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;problema en eliminarMatriculasCursoActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgfO3Y4fEeqaUfD-UOeXhg" name="borrarEnTablaMatricula" specification="_ze7voI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgfO3o4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgfO344fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM matricula &quot;
                                         + &quot;WHERE (ALUMNO_DNI = ?)&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setString(1, dni);
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e1) {
 //        dataAccessObject.rollback();
         throw new RuntimeException(&quot;problema al eliminar en matricula&quot;);
     } 
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgfO4I4fEeqaUfD-UOeXhg" name="estaDadaDeAlta" specification="_zf2VoI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgfO4Y4fEeqaUfD-UOeXhg" name="matricula" type="_zed1kY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgfO4o4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgfO444fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM matricula &quot;
                                         + &quot;WHERE ((ALUMNO_DNI = ?) &quot;
                                                + &quot;AND (CURSO_Cod_CURSO = ?))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try{
         stmt.setString(1, matricula.getDNI());
         stmt.setInt(2, matricula.getCod_Curso());
         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         rs.close();
         stmt.close();
         return ok;
         } catch (SQLException ex) {
         throw new RuntimeException(&quot;problema en estaDadaDeAlta&quot;);
         }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_zbQJgI4fEeqaUfD-UOeXhg" name="ControladorMatricula">
          <eAnnotations xmi:id="_zbQJgY4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_zbQJgo4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_zbQJhI4fEeqaUfD-UOeXhg" type="_zbPicI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zbQJhY4fEeqaUfD-UOeXhg" name="recuperarUltimoCodMatricula" method="_zgfO1o4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zbQwkI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_ze7IkI4fEeqaUfD-UOeXhg" name="eliminarMatriculasCursoActual" method="_zgfO244fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_ze7IkY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_ze7voI4fEeqaUfD-UOeXhg" name="borrarEnTablaMatricula" method="_zgfO3Y4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_ze7voY4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_ze7voo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf1HgY4fEeqaUfD-UOeXhg" name="insertarEnTablaMatricula" method="_zgfO2I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf1Hgo4fEeqaUfD-UOeXhg" name="matricula" type="_zed1kY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf1Hg44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf2VoI4fEeqaUfD-UOeXhg" name="estaDadaDeAlta" method="_zgfO4I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf2VoY4fEeqaUfD-UOeXhg" name="matricula" type="_zed1kY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf2Voo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf2Vo44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_zbR-sI4fEeqaUfD-UOeXhg" name="ControladorGrupoPractica">
        <ownedComment xmi:id="_zgpm4o4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
 altas, bajas, modificaciones y consultas de grupos de prÃ¡cticas.
 *
@author Confiencial</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgf14I4fEeqaUfD-UOeXhg" name="darAltaGrupoPractica" specification="_zf2VpI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgf14Y4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     boolean dar_baja_grupo = false;
     try {
     if (this.noEstaDadoDeAlta(grupo,dataAccessObject)) {
         this.insertarEnTablaGrupoPractica(grupo, dataAccessObject);
     } else {
         if (this.estaActivo(grupo,dataAccessObject)) {
             throw new RuntimeException(&quot;Ya hay un grupo dado de alta con ese cÃ³digo&quot;);
         }
         this.reactivarGrupoPractica(grupo,dataAccessObject);
     }
     dataAccessObject.close();
     dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     dar_baja_grupo = true;

     ControladorEvaluacion DAOEvaluacion = new ControladorEvaluacion();

     if (DAOEvaluacion.alumnoTieneGrupoPractica(grupo.getAlumno1(),dataAccessObject)) {
         if (dar_baja_grupo) {
             this.desactivarGrupoPractica(grupo, dataAccessObject);
         }
         throw new RuntimeException(&quot;El alumno 1 ya tiene asignado un grupo de prÃ¡cticas&quot;);
     }
     if (grupo.getAlumno2() != null) {
         if (DAOEvaluacion.alumnoTieneGrupoPractica(grupo.getAlumno2(),dataAccessObject)) {
             if (dar_baja_grupo) {
                 this.desactivarGrupoPractica(grupo, dataAccessObject);
             }
             throw new RuntimeException(&quot;El alumno 2 ya tiene asignado un grupo de prÃ¡cticas&quot;);
         }
     }

     ControladorTutoria DAOTutoria = new ControladorTutoria();
     DAOTutoria.insertarEnTablaTutoria(grupo.getCodGrupoPractica(),
                                       grupo.getTutor(),
                                       dataAccessObject);

     DAOEvaluacion.actualizarPracticaEnTablaEvaluacion(grupo.getAlumno1(),
                                               grupo.getCodGrupoPractica(),
                                               grupo.getNota(),
                                               dataAccessObject);
     if (grupo.getAlumno2() != null) {
        DAOEvaluacion.actualizarPracticaEnTablaEvaluacion(grupo.getAlumno2(),
                                                  grupo.getCodGrupoPractica(),
                                                  grupo.getNota(),
                                                  dataAccessObject);
     }
     dataAccessObject.close();
     } catch (RuntimeException e) {
         if (dar_baja_grupo) {
             this.desactivarGrupoPractica(grupo,dataAccessObject);
         }
         dataAccessObject.rollback();
         throw new RuntimeException(e.getMessage());
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgf14o4fEeqaUfD-UOeXhg" name="darBajaGrupoPractica" specification="_zf28sI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgf1444fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgf15I4fEeqaUfD-UOeXhg" name="dni1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgf15Y4fEeqaUfD-UOeXhg" name="dni2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>ControladorEvaluacion DAOEvaluacion = new ControladorEvaluacion();
     ControladorTutoria DAOTutoria = new ControladorTutoria();

     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     try{
         DAOEvaluacion.borrarGrupoPracticaEnTablaEvaluacion(dni1, dataAccessObject);
         if (this.noEstaVacio(dni2)) {
             DAOEvaluacion.borrarGrupoPracticaEnTablaEvaluacion(dni2, dataAccessObject);
         }
         DAOTutoria.borrarTutoriaGrupoPractica(grupo.getCodGrupoPractica(), dataAccessObject);
         this.desactivarGrupoPractica(grupo, dataAccessObject);
         dataAccessObject.close();
     } catch (RuntimeException e) {
         dataAccessObject.rollback();
         System.out.println(&quot;Error &quot;+e.getMessage());
         throw new RuntimeException(e.getMessage());
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgf15o4fEeqaUfD-UOeXhg" name="actualizarGruposPracticas" specification="_zf28tI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgf1544fEeqaUfD-UOeXhg" name="resultado_modificaciones" type="_zej8MY4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>int tam = resultado_modificaciones.size();
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     try {
         for (int i = 0; i &lt; tam; i++){
             this.actualizarGrupoPracticas(resultado_modificaciones.get(i), dataAccessObject);
         }
         dataAccessObject.close();
     } catch (RuntimeException e) {
         dataAccessObject.rollback();
         System.out.println(e.getMessage());
         throw new RuntimeException(e.getMessage());
     }

 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgf16I4fEeqaUfD-UOeXhg" name="actualizarGrupoPracticas" specification="_zf4x4Y4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgf16Y4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgf16o4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>this.borrarRegistrosAntiguosGrupoPracticas(grupo.getCodGrupoPractica(),dataAccessObject);
     this.actualizarRegistrosNuevosGrupoPracticas(grupo, dataAccessObject);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgf1644fEeqaUfD-UOeXhg" name="borrarRegistrosAntiguosGrupoPracticas" specification="_zfFgoI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgf17I4fEeqaUfD-UOeXhg" name="cod">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgf17Y4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;UPDATE EVALUACION &quot;
                                         + &quot;SET GRUPO_PRACTICA_Cod_GP = null, &quot;
                                         + &quot;    Nota_Pr = 0 &quot;
                                         + &quot;WHERE ((CURSO_Cod_CURSO = ?) &quot;
                                         + &quot;   AND (CONVOCATORIA_idCONVOCATORIA = ?) &quot;
                                         + &quot;   AND (GRUPO_PRACTICA_Cod_GP = ?))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     Curso curso = new Curso();
     Convocatoria convocatoria = new Convocatoria();
     try {
         stmt.setInt(1, curso.getCursoActual());
         stmt.setString(2, convocatoria.getConvocatoriaActual());
         stmt.setInt(3, cod);

         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException (&quot;Problema en borrarRegistrosAntiguosGrupoPracticas&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgf17o4fEeqaUfD-UOeXhg" name="actualizarRegistrosNuevosGrupoPracticas" specification="_zf4x5I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgf1744fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgf18I4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>this.actualizarRegistrosAlumnoEnGrupoPracticas(grupo.getAlumno1().getDNI(),
                                                    grupo.getCodGrupoPractica(),
                                                    grupo.getNota(),
                                                    dataAccessObject);
     if (grupo.getAlumno2() != null) {
         this.actualizarRegistrosAlumnoEnGrupoPracticas(grupo.getAlumno2().getDNI(),
                                                        grupo.getCodGrupoPractica(),
                                                        grupo.getNota(),
                                                        dataAccessObject);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgf18Y4fEeqaUfD-UOeXhg" name="actualizarRegistrosAlumnoEnGrupoPracticas" specification="_zf6AAY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgf18o4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgf1844fEeqaUfD-UOeXhg" name="cod">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgf19I4fEeqaUfD-UOeXhg" name="nota" type="_zf5Y844fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgf19Y4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;UPDATE EVALUACION &quot;
                                         + &quot;SET GRUPO_PRACTICA_Cod_GP = ?, &quot;
                                         + &quot;    Nota_Pr = ? &quot;
                                         + &quot;WHERE ((CURSO_Cod_CURSO = ?) &quot;
                                         + &quot;   AND (CONVOCATORIA_idCONVOCATORIA = ?) &quot;
                                         + &quot;   AND (ALUMNO_DNI = ?))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     Curso curso = new Curso();
     Convocatoria convocatoria = new Convocatoria();
     try {
         stmt.setInt(1, cod);
         stmt.setFloat(2, nota);
         stmt.setInt(3, curso.getCursoActual());
         stmt.setString(4, convocatoria.getConvocatoriaActual());
         stmt.setString(5, dni_alumno);

         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException (&quot;Problema en borrarRegistrosAntiguosGrupoPracticas&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zggc8I4fEeqaUfD-UOeXhg" name="realizarConsultaGrupoPractica" specification="_zf8cQI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zggc8Y4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zggc8o4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zggc844fEeqaUfD-UOeXhg" type="_ze8WsI4fEeqaUfD-UOeXhg" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_zggc9I4fEeqaUfD-UOeXhg" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT DISTINCT  evaluacion.ALUMNO_DNI, &quot;
                                                         + &quot; evaluacion.GRUPO_PRACTICA_Cod_GP,&quot;
                                                         + &quot; tutoria.PROFESOR_Cod_P, &quot;
                                                         + &quot; evaluacion.Nota_Pr &quot;
                                         + &quot;FROM evaluacion, tutoria &quot;
                                         + &quot;WHERE ((tutoria.CURSO_Cod_CURSO = ?) &quot;
                                           + &quot; AND (tutoria.CONVOCATORIA_idCONVOCATORIA = ?) &quot;
                                           + &quot; AND (evaluacion.CURSO_Cod_CURSO = ?) &quot;
                                           + &quot; AND (evaluacion.CONVOCATORIA_idCONVOCATORIA = ?) &quot;);

     List&lt;Object> values = new ArrayList&lt;Object>();
     List&lt;ListadoGrupoPractica> resultado = new ArrayList&lt;ListadoGrupoPractica>();

     Curso curso = new Curso();
     Convocatoria convocatoria = new Convocatoria();
     int curso_actual = curso.getCursoActual();
     String convocatoria_actual = convocatoria.getConvocatoriaActual();
     values.add(curso_actual);
     values.add(convocatoria_actual);
     values.add(curso_actual);
     values.add(convocatoria_actual);

     int cod_aux = grupo.getCodGrupoPractica();
     if (cod_aux != -1) {
         sql.append(&quot; AND (tutoria.GRUPO_PRACTICA_Cod_GP = ?) &quot;);
         values.add(cod_aux);
     }

     if (this.noEstaVacio(dni)) {
         sql.append(&quot; AND (evaluacion.GRUPO_PRACTICA_Cod_GP = &quot;);
         sql.append(&quot;         (SELECT evaluacion.GRUPO_PRACTICA_Cod_GP &quot;);
         sql.append(&quot;          FROM evaluacion &quot;);
         sql.append(&quot;          WHERE ((evaluacion.ALUMNO_DNI = ?) &quot;
                 + &quot;              AND (evaluacion.CURSO_Cod_CURSO = ?) &quot;
                 + &quot;              AND (evaluacion.CONVOCATORIA_idCONVOCATORIA = ?))))  &quot;);
         values.add(dni);
         values.add(curso_actual);
         values.add(convocatoria_actual);
     }

     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     ControladorProfesor DAOProfesor = new ControladorProfesor();
     if (grupo.getTutor() != null) {
         sql.append(&quot; AND (tutoria.PROFESOR_Cod_P = ?) &quot;);
         values.add(DAOProfesor.obtenerCodigoProfesor(grupo.getTutor(), dataAccessObject));
     } 
     sql.append(&quot; AND (evaluacion.GRUPO_PRACTICA_Cod_GP = tutoria.GRUPO_PRACTICA_Cod_GP)) &quot;
              + &quot; ORDER BY (tutoria.GRUPO_PRACTICA_Cod_GP) &quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try{
         System.out.println(sql.toString());
         int i=0;
         for (Object valor: values) {
             if (valor instanceof Integer) {
                 stmt.setInt(++i, (Integer)valor);
             }

             if (valor instanceof String) {
                 stmt.setString(++i, (String)valor);
             }
         }

         ResultSet rs = stmt.executeQuery();
         if (rs.next()) {
             String dni_alumno = null;
             String dni_alumno2 = null;
             int grupo_practica = -1;
             int grupo_practica2 = -2;
             int cod_tutor = -1;
             int cod_tutor2 = -1;
             Float nota = new Float(0);
             Float nota2 = new Float(0);

             dni_alumno = rs.getString(1);
             grupo_practica = rs.getInt(2);
             cod_tutor = rs.getInt(3);
             nota = rs.getFloat(4);

             int num_alumnos_sin_procesar = 1;
             while (rs.next()) {
                 if (num_alumnos_sin_procesar == 0) {
                     dni_alumno = rs.getString(1);
                     grupo_practica = rs.getInt(2);
                     cod_tutor = rs.getInt(3);
                     nota = rs.getFloat(4);
                 } else {
                     dni_alumno2 = rs.getString(1);
                     grupo_practica2 = rs.getInt(2);
                     cod_tutor2 = rs.getInt(3);
                     nota2 = rs.getFloat(4);
                 }

                 num_alumnos_sin_procesar++;

                 if (num_alumnos_sin_procesar == 2) {
                     if (grupo_practica == grupo_practica2) {
                         resultado.add(new ListadoGrupoPractica(grupo_practica,
                                                                cod_tutor,
                                                                dni_alumno,
                                                                dni_alumno2,
                                                                nota,
                                                                dataAccessObject));
                         num_alumnos_sin_procesar = 0;
                     } else {
                         resultado.add(new ListadoGrupoPractica(grupo_practica,
                                                                cod_tutor,
                                                                dni_alumno,
                                                                null,
                                                                nota,
                                                                dataAccessObject));
                         dni_alumno = dni_alumno2;
                         grupo_practica = grupo_practica2;
                         cod_tutor = cod_tutor2;
                         nota = nota2;

                         num_alumnos_sin_procesar = 1;
                     }
                 }
             }
             if (num_alumnos_sin_procesar == 1) {
                 resultado.add(new ListadoGrupoPractica(grupo_practica,
                                                        cod_tutor,
                                                        dni_alumno,
                                                        null,
                                                        nota,
                                                        dataAccessObject));
             }

 
         }
         rs.close();
         dataAccessObject.close();
         return resultado;

     } catch (SQLException e) {
         dataAccessObject.rollback();
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;Problema en realizarConsultaGrupoPractica&quot;);
     } catch (RuntimeException e2) {
         dataAccessObject.rollback();
         System.out.println(e2.getMessage()+ &quot; lol&quot;);
         throw new RuntimeException(&quot;Problema en realizarConsultaGrupoPractica 2&quot;);
     } 
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zggc9Y4fEeqaUfD-UOeXhg" name="insertarEnTablaGrupoPractica" specification="_zf9DUI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zggc9o4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zggc944fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;INSERT GRUPO_PRACTICA &quot;
                                         + &quot;VALUES (?,?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try{
         stmt.setInt(1, grupo.getCodGrupoPractica());
         stmt.setInt(2,1);
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e) {
         throw new RuntimeException(&quot;Problema en insertarEnTablaGrupoPractica&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zggc-I4fEeqaUfD-UOeXhg" name="desactivarGrupoPractica" specification="_zf9qYI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zggc-Y4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zggc-o4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;UPDATE GRUPO_PRACTICA &quot;
                                         + &quot;SET activo = 0 &quot;
                                         + &quot;WHERE (Cod_GP = ?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setInt(1, grupo.getCodGrupoPractica());
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e1) {
         throw new RuntimeException(&quot;problema en desactivarGrupoPractica&quot;);
     } catch(RuntimeException e2) {
         throw new RuntimeException(e2.getMessage());
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zggc-44fEeqaUfD-UOeXhg" name="noEstaDadoDeAlta" specification="_zf-RcI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zggc_I4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zggc_Y4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zggc_o4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM grupo_practica &quot;
                                         + &quot;WHERE (Cod_GP = ?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setInt(1,grupo.getCodGrupoPractica());
         
         ResultSet rs = stmt.executeQuery();

         boolean ok = rs.next();
         stmt.close();

         return (!ok);
     } catch (SQLException e) {
         throw new RuntimeException(&quot;Problema en noEstaDadoDeAlta&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zggc_44fEeqaUfD-UOeXhg" name="noEstaDadoDeAlta" specification="_zf-4gI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zggdAI4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zggdAY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     boolean resul = this.noEstaDadoDeAlta(grupo, dataAccessObject);
     dataAccessObject.close();
     return resul;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zggdAo4fEeqaUfD-UOeXhg" name="reactivarGrupoPractica" specification="_zf-4g44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zggdA44fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zggdBI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;UPDATE GRUPO_PRACTICA &quot;
                                         + &quot;SET activo = 1 &quot;
                                         + &quot;WHERE (Cod_GP = ?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setInt(1, grupo.getCodGrupoPractica());
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e1) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;problema en reactivarGrupoPractica&quot;);
     } 
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zggdBY4fEeqaUfD-UOeXhg" name="reactivarGruposPracticasEnUsoEnConvocatoriaActual" specification="_zfHV0I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zggdBo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(
             &quot;UPDATE GRUPO_PRACTICA &quot;
           + &quot;SET activo = 1 &quot;
           + &quot;WHERE (Cod_GP IN (SELECT DISTINCT GRUPO_PRACTICA_Cod_GP &quot;
                              +&quot;FROM tutoria  &quot;
                              +&quot;WHERE ((CURSO_Cod_CURSO = ?) &quot;
                              + &quot;  AND (CONVOCATORIA_idCONVOCATORIA = ?)))&quot;
                 + &quot;)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();
         stmt.setInt(1, curso.getCursoActual());
         stmt.setString(2, convocatoria.getConvocatoriaActual());
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e1) {
         System.out.println(e1.getMessage());
         throw new RuntimeException(&quot;problema en reactivarGruposPracticasEnUsoEnConvocatoriaActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zggdB44fEeqaUfD-UOeXhg" name="desactivarGruposPracticas" specification="_zbUa8I4fEeqaUfD-UOeXhg">
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder( &quot;UPDATE GRUPO_PRACTICA &quot;
                                          + &quot;SET activo = 0 &quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         dataAccessObject.actualizar();
         dataAccessObject.close();
     } catch (RuntimeException e1) {
         System.out.println(e1.getMessage());
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;problema en reactivarGruposPracticasEnUsoEnConvocatoriaActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zggdCI4fEeqaUfD-UOeXhg" name="estaActivo" specification="_zf_fkI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghEAI4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zghEAY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zghEAo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM grupo_practica &quot;
                                         + &quot;WHERE ((Cod_GP = ?) AND (activo = 1))&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         stmt.setInt(1, grupo.getCodGrupoPractica());
         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         stmt.close();
         return ok;
     } catch (SQLException e) {
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;Ha ocurrido un error al consultar la Base de Datos&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zghEA44fEeqaUfD-UOeXhg" name="noEstaVacio" specification="_zbVCAI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghEBI4fEeqaUfD-UOeXhg" name="cadena">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zghEBY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return cadena != null &amp;&amp; !&quot;&quot;.equals(cadena);
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_zbSlwI4fEeqaUfD-UOeXhg" name="ControladorGrupoPractica">
          <eAnnotations xmi:id="_zbSlwY4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_zbSlwo4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_zbSlxI4fEeqaUfD-UOeXhg" type="_zbR-sI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zbUa8I4fEeqaUfD-UOeXhg" name="desactivarGruposPracticas" method="_zggdB44fEeqaUfD-UOeXhg"/>
        <ownedOperation xmi:id="_zbVCAI4fEeqaUfD-UOeXhg" name="noEstaVacio" visibility="private" method="_zghEA44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zbVCAY4fEeqaUfD-UOeXhg" name="cadena">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zbVpEI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfFgoI4fEeqaUfD-UOeXhg" name="borrarRegistrosAntiguosGrupoPracticas" visibility="private" method="_zgf1644fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfFgoY4fEeqaUfD-UOeXhg" name="cod">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfFgoo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfHV0I4fEeqaUfD-UOeXhg" name="reactivarGruposPracticasEnUsoEnConvocatoriaActual" method="_zggdBY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfHV0Y4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf2VpI4fEeqaUfD-UOeXhg" name="darAltaGrupoPractica" method="_zgf14I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf2VpY4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf28sI4fEeqaUfD-UOeXhg" name="darBajaGrupoPractica" method="_zgf14o4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf28sY4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf28so4fEeqaUfD-UOeXhg" name="dni1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zf28s44fEeqaUfD-UOeXhg" name="dni2">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zf28tI4fEeqaUfD-UOeXhg" name="actualizarGruposPracticas" method="_zgf15o4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf28tY4fEeqaUfD-UOeXhg" name="resultado_modificaciones" type="_zej8MY4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf4x4Y4fEeqaUfD-UOeXhg" name="actualizarGrupoPracticas" method="_zgf16I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf4x4o4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf4x444fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf4x5I4fEeqaUfD-UOeXhg" name="actualizarRegistrosNuevosGrupoPracticas" visibility="private" method="_zgf17o4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf5Y8I4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf5Y8Y4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf6AAY4fEeqaUfD-UOeXhg" name="actualizarRegistrosAlumnoEnGrupoPracticas" visibility="private" method="_zgf18Y4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf6nEI4fEeqaUfD-UOeXhg" name="dni_alumno">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zf6nEY4fEeqaUfD-UOeXhg" name="cod">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zf6nEo4fEeqaUfD-UOeXhg" name="nota" type="_zf5Y844fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf6nE44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf8cQI4fEeqaUfD-UOeXhg" name="realizarConsultaGrupoPractica" method="_zggc8I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf8cQY4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf8cQo4fEeqaUfD-UOeXhg" name="dni">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zf8cQ44fEeqaUfD-UOeXhg" type="_ze8WsI4fEeqaUfD-UOeXhg" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_zf8cRI4fEeqaUfD-UOeXhg" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zf9DUI4fEeqaUfD-UOeXhg" name="insertarEnTablaGrupoPractica" visibility="private" method="_zggc9Y4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf9DUY4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf9DUo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf9qYI4fEeqaUfD-UOeXhg" name="desactivarGrupoPractica" visibility="private" method="_zggc-I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf9qYY4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf9qYo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf-RcI4fEeqaUfD-UOeXhg" name="noEstaDadoDeAlta" method="_zggc-44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf-RcY4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf-Rco4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf-Rc44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zf-4gI4fEeqaUfD-UOeXhg" name="noEstaDadoDeAlta" method="_zggc_44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf-4gY4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf-4go4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zf-4g44fEeqaUfD-UOeXhg" name="reactivarGrupoPractica" visibility="private" method="_zggdAo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf-4hI4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf-4hY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zf_fkI4fEeqaUfD-UOeXhg" name="estaActivo" visibility="private" method="_zggdCI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zf_fkY4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf_fko4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zf_fk44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_zbYFUI4fEeqaUfD-UOeXhg" name="ControladorProfesor">
        <ownedComment xmi:id="_zgpm444fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
altas, bajas, modificaciones y consultas de profesores.
 *
@author Confiencial</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zghEBo4fEeqaUfD-UOeXhg" name="estaDadoDeAlta" specification="_zgAGoI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghEB44fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zghECI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>boolean ok;
     StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM profesor &quot;
                                         + &quot;WHERE ((activo = 1) &quot;);
     List&lt;Object> values = new ArrayList&lt;Object>();
         
     if (noEstaVacio(profesor.getNombre())){
         sql.append(&quot; AND (nombre = ?) &quot;);
         values.add(profesor.getNombre());
     }

     if (noEstaVacio(profesor.getApellidos())){
     
         sql.append(&quot; AND (apellidos = ?) &quot;);
         values.add(profesor.getApellidos());
     }
     sql.append(&quot;)&quot;);
     
     
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try{           
         int i=0;
         for (Object valor: values) {
             stmt.setString(++i, (String)valor);
         }

         ResultSet rs = stmt.executeQuery();
         ok = rs.next();
         dataAccessObject.close();
         rs.close();         
         return ok;
     }
     catch (SQLException ex) {
         System.out.println(ex.getMessage());
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema al comprobar que el profesor esta dado de alta&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zghECY4fEeqaUfD-UOeXhg" name="darAltaProfesor" specification="_zgAtsY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghECo4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();

     try{
         this.insertarEnTablaProfesor(profesor, dataAccessObject);

         dataAccessObject.close();
     } catch (RuntimeException e) {
         dataAccessObject.rollback();
         throw new RuntimeException(e.getMessage());
     }

     dataAccessObject = dataAccessObject.getDataAccessObjectConnected();

     try {
         this.validarGrupoClase(profesor, profesor.getGrupoClase1(),
                                dataAccessObject);
         this.validarGrupoClase(profesor, profesor.getGrupoClase2(),
                                dataAccessObject);
         dataAccessObject.close();
     } catch (RuntimeException e1){
     //    profesor.bajaProfesor();
         dataAccessObject.rollback();
         throw new RuntimeException(e1.getMessage());
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zghEC44fEeqaUfD-UOeXhg" name="validarGrupoClase" specification="_zgAts44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghEDI4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zghEDY4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zghEDo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>if (this.noEstaVacio(grupo_clase.getCodGrupoClase())){
             grupo_clase.validarGrupoClase(dataAccessObject);
             this.insertarEnTablaImparte(profesor,
                                     grupo_clase.getCodGrupoClase(),
                                     dataAccessObject);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zghrEI4fEeqaUfD-UOeXhg" name="insertarEnTablaProfesor" specification="_zgBUwo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghrEY4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zghrEo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;INSERT profesor VALUES (?,?,?,?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         stmt.setInt(1, profesor.getCodProfesor());
         stmt.setString(2, profesor.getNombre());
         stmt.setString(3, profesor.getApellidos());
         stmt.setInt(4, 1);

         dataAccessObject.actualizar();
         stmt.close();
         }
     catch (SQLException ex) {
         throw new RuntimeException(&quot;problema en insertarEnTablaProfesor&quot;);
         }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zghrE44fEeqaUfD-UOeXhg" name="insertarEnTablaImparte" specification="_zgCi4I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghrFI4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zghrFY4fEeqaUfD-UOeXhg" name="cod_grupo_clase">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zghrFo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;INSERT imparte VALUES (?,?,?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     Curso curso = new Curso();

     try {
         System.out.println(profesor.getCodProfesor()+&quot; &quot;+cod_grupo_clase+&quot; &quot;+curso.getCursoActual());
         stmt.setInt(1, profesor.getCodProfesor());
         stmt.setString(2, cod_grupo_clase);
         stmt.setInt(3, curso.getCursoActual());

         dataAccessObject.actualizar();
         stmt.close();
         }
     catch (SQLException ex) {
         throw new RuntimeException(&quot;problema en insertarEnTablaImparte&quot;);
         }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zghrF44fEeqaUfD-UOeXhg" name="darBajaProfesor" specification="_zgCi5I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghrGI4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>int cod_profesor;
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     try {
         cod_profesor = this.obtenerCodigoProfesor(profesor, dataAccessObject);

         if (this.estaRegistradoEnTutoriaActualmente(cod_profesor, dataAccessObject)) {
             throw new RuntimeException(&quot;Revise que no estÃ© tutorizando ningÃºn grupo de prÃ¡cticas&quot;);
         }
         this.borrarEnTablaImparte(cod_profesor, dataAccessObject);
     //    this.borrarEnTablaTutoria(cod_profesor, dataAccessObject);
         if (this.estaRegistradoEnImparte(cod_profesor, dataAccessObject)
          ||(this.estaRegistradoEnTutoria(cod_profesor, dataAccessObject))) {
             this.desactivarProfesor(cod_profesor, dataAccessObject);
         } else {
             this.borrarEnTablaProfesor(cod_profesor, dataAccessObject);
         }

         dataAccessObject.close();
     } catch (RuntimeException e) {
         dataAccessObject.rollback();
         throw new RuntimeException(e.getMessage());
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zghrGY4fEeqaUfD-UOeXhg" name="reactivarProfesoresConTutoriasEnConvocatoriaActual" specification="_zfOqkI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghrGo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(
             &quot;UPDATE PROFESOR &quot;
           + &quot;SET activo = 1 &quot;
           + &quot;WHERE (Cod_P IN (SELECT DISTINCT PROFESOR_Cod_P &quot;
                              +&quot;FROM tutoria  &quot;
                              +&quot;WHERE ((CURSO_Cod_CURSO = ?) &quot;
                              +&quot;  AND (CONVOCATORIA_idCONVOCATORIA = ?)))&quot;
                 + &quot;)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();
         stmt.setInt(1, curso.getCursoActual());
         stmt.setString(2, convocatoria.getConvocatoriaActual());
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e1) {
         System.out.println(e1.getMessage());
         throw new RuntimeException(&quot;problema en reactivarGruposPracticasEnUsoEnConvocatoriaActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zghrG44fEeqaUfD-UOeXhg" name="reactivarProfesoresConImparteEnConvocatoriaActual" specification="_zfPRoI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghrHI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(
             &quot;UPDATE PROFESOR &quot;
           + &quot;SET activo = 1 &quot;
           + &quot;WHERE (Cod_P IN (SELECT DISTINCT PROFESOR_Cod_P &quot;
                              +&quot;FROM imparte  &quot;
                              +&quot;WHERE ((CURSO_Cod_CURSO = ?)))&quot;
                 + &quot;)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         Curso curso = new Curso();
         stmt.setInt(1, curso.getCursoActual());
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e1) {
         System.out.println(e1.getMessage());
         throw new RuntimeException(&quot;problema en reactivarGruposPracticasEnUsoEnConvocatoriaActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zghrHY4fEeqaUfD-UOeXhg" name="eliminarImparticionesCursoActual" specification="_zfPRoo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zghrHo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM imparte &quot;
                                         + &quot;WHERE (CURSO_Cod_CURSO = ?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         Curso curso = new Curso();
         stmt.setInt(1, curso.getCursoActual());
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e) {
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;problema en eliminarMatriculasCursoActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgiSII4fEeqaUfD-UOeXhg" name="obtenerCodigoProfesor" specification="_zgCi5o4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgiSIY4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgiSIo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgiSI44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>int cod_profesor;

     StringBuilder sql = new StringBuilder(
                              &quot;SELECT Cod_P &quot;
                            + &quot;FROM profesor &quot;
                            + &quot;WHERE ((nombre = ?) AND (apellidos = ?))&quot;);
     List&lt;Object> values = new ArrayList&lt;Object>();
     values.add(profesor.getNombre());
     values.add(profesor.getApellidos());
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     int i=0;
     for (Object valor: values) {
         try {
             stmt.setString(++i, (String) valor);
         } catch (SQLException ex) {
             dataAccessObject.rollback();
             throw new RuntimeException(&quot;Error en el for Object valor: values&quot;);
         }
     }

     try{
         ResultSet rs = stmt.executeQuery();

         if (rs.next()) {
            cod_profesor = rs.getInt(1); 
         } else {
            cod_profesor = -1;
         }
         rs.close();
         stmt.close();
         return cod_profesor;

     } catch (SQLException ex) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;problema al calcular el codigo del profesor&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgiSJI4fEeqaUfD-UOeXhg" name="estaRegistradoEnImparteActualmente" specification="_zfP4sI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgiSJY4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgiSJo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgiSJ44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM imparte &quot;
                                         + &quot;WHERE ((PROFESOR_Cod_P = ?) &quot;
                                           + &quot;AND (CURSO_Cod_CURSO = ?))&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {

         Curso curso = new Curso();
         stmt.setInt(1, cod_profesor);
         stmt.setInt(2, curso.getCursoActual());
         ResultSet rs = stmt.executeQuery();
         
         boolean ok = rs.next();
         rs.close();
         stmt.close();
         
         return ok;
     } catch (SQLException e) {
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;Problema en estaRegistradoEnImparteActualmente&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgiSKI4fEeqaUfD-UOeXhg" name="estaRegistradoEnTutoriaActualmente" specification="_zfQfwY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgiSKY4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgiSKo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgiSK44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM tutoria &quot;
                                         + &quot;WHERE ((PROFESOR_Cod_P = ?) &quot;
                                            + &quot;AND (CURSO_Cod_CURSO = ?) &quot;
                                            + &quot;AND (CONVOCATORIA_idCONVOCATORIA = ?))&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();

         stmt.setInt(1, cod_profesor);
         stmt.setInt(2, curso.getCursoActual());
         stmt.setString(3, convocatoria.getConvocatoriaActual());

         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         rs.close();
         stmt.close();
         return ok;
     } catch (SQLException e) {
         throw new RuntimeException(&quot;Problema en estaRegistradoEnTutoriaActualmente&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgiSLI4fEeqaUfD-UOeXhg" name="estaRegistradoEnImparte" specification="_zfRG0I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgiSLY4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgiSLo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgiSL44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM imparte &quot;
                                         + &quot;WHERE (PROFESOR_Cod_P = ?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {

         stmt.setInt(1, cod_profesor);
         ResultSet rs = stmt.executeQuery();

         boolean ok = rs.next();
         rs.close();
         stmt.close();

         return ok;
     } catch (SQLException e) {
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;Problema en estaRegistradoEnImparte&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgiSMI4fEeqaUfD-UOeXhg" name="estaRegistradoEnTutoria" specification="_zfRt4Y4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgiSMY4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgiSMo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgiSM44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM tutoria &quot;
                                         + &quot;WHERE (PROFESOR_Cod_P = ?)&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {

         stmt.setInt(1, cod_profesor);

         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         rs.close();
         stmt.close();
         return ok;
     } catch (SQLException e) {
         throw new RuntimeException(&quot;Problema en estaRegistradoEnTutoria&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgiSNI4fEeqaUfD-UOeXhg" name="borrarEnTablaProfesor" specification="_zfSU8I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgiSNY4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgiSNo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM profesor &quot;
                                         + &quot;WHERE (Cod_P = ?)&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try{
         stmt.setInt(1, cod_profesor);
         dataAccessObject.actualizar();
         stmt.close();
     }catch (SQLException e1) {
     //    dataAccessObject.rollback();
         throw new RuntimeException(&quot;problema al eliminar en profesor&quot;);
     } catch (RuntimeException e2) {
 //           dataAccessObject.rollback();
         throw new RuntimeException(e2.getMessage()); //&quot;problema al eliminar en profesor&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgiSN44fEeqaUfD-UOeXhg" name="borrarEnTablaImparte" specification="_zfS8AI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgiSOI4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgiSOY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM imparte &quot;
                                         + &quot;WHERE ((PROFESOR_Cod_P = ?) &quot;
                                            + &quot;AND (CURSO_Cod_CURSO = ?))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         Curso curso = new Curso();

         stmt.setInt(1, cod_profesor);
         stmt.setInt(2, curso.getCursoActual());
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e1) {
     //    dataAccessObject.rollback();
         throw new RuntimeException(&quot;problema al eliminar en imparte&quot;);
     } catch(RuntimeException e2) {
 //        dataAccessObject.rollback();
         throw new RuntimeException(e2.getMessage()); //&quot;problema al eliminar en imparte&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgiSOo4fEeqaUfD-UOeXhg" name="borrarEnTablaTutoria" specification="_zfS8A44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgiSO44fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgiSPI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM tutoria &quot;
                                         + &quot;WHERE ((PROFESOR_Cod_P = ?) &quot;
                                            + &quot;AND (CURSO_Cod_CURSO = ?))&quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try{
         Curso curso = new Curso();

         stmt.setInt(1, cod_profesor);
         stmt.setInt(2, curso.getCursoActual());
         dataAccessObject.actualizar();
         stmt.close();
     }catch (SQLException e1) {
     //    dataAccessObject.rollback();
         throw new RuntimeException(&quot;problema al eliminar en tutoria&quot;);
     } catch (RuntimeException e2) {
//            dataAccessObject.rollback();
         throw new RuntimeException(e2.getMessage()); //&quot;problema al eliminar en tutoria&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgi5MI4fEeqaUfD-UOeXhg" name="desactivarProfesor" specification="_zfUKII4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgi5MY4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgi5Mo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;UPDATE PROFESOR&quot;
                                         + &quot;SET activo = 0 &quot;
                                         + &quot;WHERE (Cod_P = ?)&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try{
         stmt.setInt(1, cod_profesor);
         dataAccessObject.actualizar();
         stmt.close();
     }catch (SQLException e1) {
     //    dataAccessObject.rollback();
         throw new RuntimeException(&quot;problema al desactivar en profesor&quot;);
     } catch (RuntimeException e2) {
 //           dataAccessObject.rollback();
         throw new RuntimeException(e2.getMessage());
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgi5M44fEeqaUfD-UOeXhg" name="recuperarUltimoCodProfesor" specification="_zbahkI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgi5NI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT Cod_P &quot;
                                         + &quot;FROM profesor &quot;
                                         + &quot;WHERE (Cod_P >= ALL (SELECT Cod_P&quot;
                                                             + &quot; FROM profesor))&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         ResultSet rs = stmt.executeQuery();
         int ultimo_cod = 0;
         if (rs.next()) {
             ultimo_cod = rs.getInt(1);
         }
         rs.close();
         dataAccessObject.close();
         return ultimo_cod;
     }
     catch (SQLException ex) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema al consultar la clave del Ãºltimo profesor&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgi5NY4fEeqaUfD-UOeXhg" name="realizarConsultaProfesor" specification="_zgDJ8I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgi5No4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgi5N44fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgi5OI4fEeqaUfD-UOeXhg" type="_zfMOUI4fEeqaUfD-UOeXhg" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_zgi5OY4fEeqaUfD-UOeXhg" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>List&lt;ListadoProfesor> resultado = new ArrayList&lt;ListadoProfesor>();
     
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
   
     try{
         this.anyadirProfesoresConClases(resultado, profesor, grupo_clase, dataAccessObject);
         if (this.estaVacio(grupo_clase.getCodGrupoClase())) {
             this.anyadirProfesorSinClases(resultado, profesor, dataAccessObject);
         }
         dataAccessObject.close();
         return resultado;
     } catch (RuntimeException e) {
         System.out.println(e.getMessage());
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Ha ocurrido un problema al realizar la consulta&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgi5Oo4fEeqaUfD-UOeXhg" name="actualizarProfesores" specification="_zgDxAI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgi5O44fEeqaUfD-UOeXhg" name="resultado_consulta" type="_zej8MY4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     int tam = resultado_consulta.size();
     try {
         Profesor profesor = new Profesor();
         for (int i = 0; i &lt; tam; i++){
              profesor = new Profesor(resultado_consulta.get(i).getCodProfesor(),
                                      resultado_consulta.get(i).getNombre(),
                                      resultado_consulta.get(i).getApellidos(),
                                      resultado_consulta.get(i).getGrupoClase1(),
                                      resultado_consulta.get(i).getGrupoClase2());
              this.actualizarProfesor(profesor, dataAccessObject);
         }
         dataAccessObject.close();
     } catch (RuntimeException e) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Ha ocurrido un error durante la actualizaciÃ³n.&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgi5PI4fEeqaUfD-UOeXhg" name="actualizarProfesor" specification="_zgEYEo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgi5PY4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgi5Po4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>int cod = profesor.getCodProfesor();
     this.borrarEnTablaImparte(cod, dataAccessObject);

     StringBuilder sql = new StringBuilder(&quot;UPDATE PROFESOR &quot;
                                         + &quot;SET Nombre = ?,&quot;
                                         + &quot;    Apellidos = ? &quot;
                                         + &quot;WHERE (Cod_P = ?)&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {

         stmt.setString(1, profesor.getNombre());
         stmt.setString(2, profesor.getApellidos());
         stmt.setInt(3, profesor.getCodProfesor());

         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException (&quot;Problema en actualizarProfesor 1&quot;);
     }

     String cod_grupo_clase = profesor.getGrupoClase1().getCodGrupoClase();
     System.out.println(&quot;GrupoClase 1: &quot;+cod_grupo_clase);
     if (this.noEstaVacio(cod_grupo_clase)) {
         this.insertarEnTablaImparte(profesor, cod_grupo_clase, dataAccessObject);
     }

     cod_grupo_clase = profesor.getGrupoClase2().getCodGrupoClase();
     System.out.println(&quot;GrupoClase 2: &quot;+cod_grupo_clase);
     if (this.noEstaVacio(cod_grupo_clase)) {
         this.insertarEnTablaImparte(profesor, cod_grupo_clase, dataAccessObject);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgi5P44fEeqaUfD-UOeXhg" name="anyadirProfesoresConClases" specification="_zgE_II4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgi5QI4fEeqaUfD-UOeXhg" name="resultado" type="_zej8MY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgi5QY4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgi5Qo4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgi5Q44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT profesor.Nombre, profesor.Apellidos, &quot;
                                               + &quot; imparte.GRUPO_CLASE_Cod_GC,&quot;
                                               + &quot; profesor.Cod_P &quot;
                                         + &quot;FROM profesor, imparte &quot;
                                         + &quot;WHERE ( (profesor.activo = 1) &quot;
                                            + &quot; AND (imparte.CURSO_Cod_CURSO = ?) &quot;);

     List&lt;Object> values = new ArrayList&lt;Object>();
     Curso curso = new Curso();
     values.add(curso.getCursoActual());

     if (this.noEstaVacio(profesor.getNombre())){
         sql.append(&quot; AND (profesor.Nombre = ?) &quot;);
         values.add(this.obtenerCodigoProfesor(profesor, dataAccessObject));
     }

     if (this.noEstaVacio(profesor.getApellidos())) {

         sql.append(&quot; AND (profesor.Apellidos = ?) &quot;);
         values.add(profesor.getApellidos());
     }

     if (this.noEstaVacio(grupo_clase.getCodGrupoClase())) {
         sql.append(&quot; AND (Cod_P IN (SELECT PROFESOR_Cod_P &quot;
                                  + &quot;FROM imparte &quot;
                                  + &quot;WHERE (GRUPO_CLASE_Cod_GC = ?)&quot;
                                  + &quot;)&quot;
                        + &quot;)&quot;);
         values.add(grupo_clase.getCodGrupoClase());
     }

     sql.append(&quot; AND (imparte.PROFESOR_Cod_P = profesor.Cod_P)) &quot;);
     
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     
     try{
         System.out.println(sql.toString());
         int i=0;
         for (Object valor: values) {
             if (valor instanceof Integer) {
                 stmt.setInt(++i, (Integer)valor);
             }

             if (valor instanceof String) {
                 stmt.setString(++i, (String)valor);
             }
         }
         ResultSet rs = stmt.executeQuery();

         String nombre = &quot;1&quot;;
         String apellidos = &quot;2&quot;;
         String grupoclase = null;
         String grupoclase2 = null;
         int num_grupos_clase = 0;
         int cod_profesor = -1;

         while (rs.next()) {
             if ((nombre.equals(rs.getString(1))) &amp;&amp;
                 (apellidos.equals(rs.getString(2)))) {

                 num_grupos_clase = 0;
                 grupoclase2 = rs.getString(3);
                 cod_profesor = rs.getInt(4);
                 resultado.add(new ListadoProfesor(cod_profesor, nombre, apellidos, grupoclase,
                                                   grupoclase2));
             } else {
                 if (num_grupos_clase == 1) {
                     resultado.add(new ListadoProfesor(cod_profesor, nombre, apellidos,
                                                       grupoclase, null));
                     num_grupos_clase = 0;
                 }

                 if (num_grupos_clase == 0) {
                     nombre = rs.getString(1);
                     apellidos = rs.getString(2);
                     grupoclase = rs.getString(3);
                     cod_profesor = rs.getInt(4);
                     num_grupos_clase = 1;
                 }
             }
         }
         if (num_grupos_clase == 1) {
             resultado.add(new ListadoProfesor(cod_profesor, nombre, apellidos,
                                               grupoclase, null));
         }

         stmt.close();
         rs.close();
     } catch (SQLException e) {
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;Ha ocurrido un problema en aÃ±adirProfesoresConClases&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgi5RI4fEeqaUfD-UOeXhg" name="anyadirProfesorSinClases" specification="_zgFmMI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgi5RY4fEeqaUfD-UOeXhg" name="resultado" type="_zej8MY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgi5Ro4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgi5R44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT DISTINCT profesor.Nombre, &quot;
                                                        + &quot; profesor.Apellidos, &quot;
                                                        + &quot; profesor.Cod_P &quot;
                                          +&quot; FROM profesor, imparte &quot;
                                         + &quot; WHERE ((profesor.activo = 1) &quot;);

     List&lt;Object> values = new ArrayList&lt;Object>();

     if (this.noEstaVacio(profesor.getNombre())){
         sql.append(&quot; AND (profesor.Nombre = ?) &quot;);
         values.add(profesor.getNombre());
     }

     if (this.noEstaVacio(profesor.getApellidos())) {

         sql.append(&quot; AND (profesor.Apellidos = ?) &quot;);
         values.add(profesor.getApellidos());
     }

     sql.append(&quot; AND (profesor.Cod_P NOT IN (SELECT imparte.PROFESOR_Cod_P &quot;
                                            +&quot;FROM imparte &quot;
                                            +&quot;WHERE ((imparte.CURSO_Cod_CURSO = ?))))) &quot;);
     Curso curso = new Curso();
     values.add(curso.getCursoActual());
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try{
         int i=0;
         for (Object valor: values) {
             if (valor instanceof Integer) {
                 stmt.setInt(++i, (Integer)valor);
             }

             if (valor instanceof String) {
                 stmt.setString(++i, (String)valor);
             }
         }

         ResultSet rs = stmt.executeQuery();
         boolean no_resultados = true;
         int cod_profesor = -1;
         String nombre = null;
         String apellidos = null;
         while (rs.next()) {
             no_resultados = false;
             nombre = rs.getString(1);
             apellidos = rs.getString(2);
             cod_profesor = rs.getInt(3);
             resultado.add(new ListadoProfesor(cod_profesor, nombre, apellidos,
                                               null, null));
         }

         if (no_resultados) {
             // System.out.println(&quot;La consulta no ha producido ningÃºn resultado&quot;);
         }
         stmt.close();
         rs.close();
     } catch (SQLException e) {
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;Ha ocurrido un problema en aÃ±adirProfesorSinClases&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgi5SI4fEeqaUfD-UOeXhg" name="obtenerNombreProfesor" specification="_zfVYQI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgi5SY4fEeqaUfD-UOeXhg" name="codigo">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgi5So4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgi5S44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT Nombre &quot;
                                         + &quot;FROM profesor &quot;
                                         + &quot;WHERE (Cod_P = ?) &quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         stmt.setInt(1, codigo);
         ResultSet rs = stmt.executeQuery();
         if (rs.next()) {
             return rs.getString(1);
         }
         throw new RuntimeException(&quot;No se ha encontrado un profesor con ese cÃ³digo&quot;);

     } catch (SQLException e) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en obtenerNombreProfesor&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgjgQI4fEeqaUfD-UOeXhg" name="obtenerApellidosProfesor" specification="_zfWmYI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgjgQY4fEeqaUfD-UOeXhg" name="codigo">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgjgQo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgjgQ44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT Apellidos &quot;
                                         + &quot;FROM profesor &quot;
                                         + &quot;WHERE (Cod_P = ?) &quot;);
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         stmt.setInt(1, codigo);
         ResultSet rs = stmt.executeQuery();

         if (rs.next()) {
             return rs.getString(1);
         }
         throw new RuntimeException(&quot;No se ha encontrado un profesor con ese cÃ³digo&quot;);

     } catch (SQLException e) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en obtenerApellidosProfesor&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgjgRI4fEeqaUfD-UOeXhg" name="noEstaVacio" specification="_zbbvsI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgjgRY4fEeqaUfD-UOeXhg" name="cadena">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgjgRo4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return cadena != null &amp;&amp; !&quot;&quot;.equals(cadena);
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgjgR44fEeqaUfD-UOeXhg" name="estaVacio" specification="_zbcWwo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgjgSI4fEeqaUfD-UOeXhg" name="cadena">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgjgSY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>return ((cadena == null) || (&quot;&quot;.equals(cadena)));
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_zbYsYI4fEeqaUfD-UOeXhg" name="ControladorProfesor">
          <eAnnotations xmi:id="_zbYsYY4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_zbYsYo4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_zbZTcY4fEeqaUfD-UOeXhg" type="_zbYFUI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zbahkI4fEeqaUfD-UOeXhg" name="recuperarUltimoCodProfesor" method="_zgi5M44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zbbIoI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zbbvsI4fEeqaUfD-UOeXhg" name="noEstaVacio" visibility="private" method="_zgjgRI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zbcWwI4fEeqaUfD-UOeXhg" name="cadena">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zbcWwY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zbcWwo4fEeqaUfD-UOeXhg" name="estaVacio" visibility="private" method="_zgjgR44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zbcWw44fEeqaUfD-UOeXhg" name="cadena">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zbcWxI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfOqkI4fEeqaUfD-UOeXhg" name="reactivarProfesoresConTutoriasEnConvocatoriaActual" method="_zghrGY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfOqkY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfPRoI4fEeqaUfD-UOeXhg" name="reactivarProfesoresConImparteEnConvocatoriaActual" method="_zghrG44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfPRoY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfPRoo4fEeqaUfD-UOeXhg" name="eliminarImparticionesCursoActual" method="_zghrHY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfPRo44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfP4sI4fEeqaUfD-UOeXhg" name="estaRegistradoEnImparteActualmente" visibility="private" method="_zgiSJI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfP4sY4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfP4so4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfQfwI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfQfwY4fEeqaUfD-UOeXhg" name="estaRegistradoEnTutoriaActualmente" visibility="private" method="_zgiSKI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfQfwo4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfQfw44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfQfxI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfRG0I4fEeqaUfD-UOeXhg" name="estaRegistradoEnImparte" visibility="private" method="_zgiSLI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfRG0Y4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfRG0o4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfRt4I4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfRt4Y4fEeqaUfD-UOeXhg" name="estaRegistradoEnTutoria" visibility="private" method="_zgiSMI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfRt4o4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfRt444fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfRt5I4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfSU8I4fEeqaUfD-UOeXhg" name="borrarEnTablaProfesor" visibility="private" method="_zgiSNI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfSU8Y4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfSU8o4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfS8AI4fEeqaUfD-UOeXhg" name="borrarEnTablaImparte" visibility="private" method="_zgiSN44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfS8AY4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfS8Ao4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfS8A44fEeqaUfD-UOeXhg" name="borrarEnTablaTutoria" visibility="private" method="_zgiSOo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfS8BI4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfTjEI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfUKII4fEeqaUfD-UOeXhg" name="desactivarProfesor" visibility="private" method="_zgi5MI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfUKIY4fEeqaUfD-UOeXhg" name="cod_profesor">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfUxMI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfVYQI4fEeqaUfD-UOeXhg" name="obtenerNombreProfesor" method="_zgi5SI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfVYQY4fEeqaUfD-UOeXhg" name="codigo">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfV_UI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfV_UY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfWmYI4fEeqaUfD-UOeXhg" name="obtenerApellidosProfesor" method="_zgjgQI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfWmYY4fEeqaUfD-UOeXhg" name="codigo">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfWmYo4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zfWmY44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zgAGoI4fEeqaUfD-UOeXhg" name="estaDadoDeAlta" method="_zghEBo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgAGoY4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgAtsI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zgAtsY4fEeqaUfD-UOeXhg" name="darAltaProfesor" method="_zghECY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgAtso4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zgAts44fEeqaUfD-UOeXhg" name="validarGrupoClase" method="_zghEC44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgAttI4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgBUwI4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgBUwY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zgBUwo4fEeqaUfD-UOeXhg" name="insertarEnTablaProfesor" method="_zghrEI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgBUw44fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgBUxI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zgCi4I4fEeqaUfD-UOeXhg" name="insertarEnTablaImparte" method="_zghrE44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgCi4Y4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgCi4o4fEeqaUfD-UOeXhg" name="cod_grupo_clase">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgCi444fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zgCi5I4fEeqaUfD-UOeXhg" name="darBajaProfesor" method="_zghrF44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgCi5Y4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zgCi5o4fEeqaUfD-UOeXhg" name="obtenerCodigoProfesor" method="_zgiSII4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgCi544fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgCi6I4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgCi6Y4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zgDJ8I4fEeqaUfD-UOeXhg" name="realizarConsultaProfesor" method="_zgi5NY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgDJ8Y4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgDJ8o4fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgDJ844fEeqaUfD-UOeXhg" type="_zfMOUI4fEeqaUfD-UOeXhg" isOrdered="true" direction="return">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_zgDJ9I4fEeqaUfD-UOeXhg" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zgDxAI4fEeqaUfD-UOeXhg" name="actualizarProfesores" method="_zgi5Oo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgEYEI4fEeqaUfD-UOeXhg" name="resultado_consulta" type="_zej8MY4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zgEYEo4fEeqaUfD-UOeXhg" name="actualizarProfesor" method="_zgi5PI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgEYE44fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgEYFI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zgE_II4fEeqaUfD-UOeXhg" name="anyadirProfesoresConClases" visibility="private" method="_zgi5P44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgE_IY4fEeqaUfD-UOeXhg" name="resultado" type="_zej8MY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgE_Io4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgE_I44fEeqaUfD-UOeXhg" name="grupo_clase" type="_zedOgY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgE_JI4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zgFmMI4fEeqaUfD-UOeXhg" name="anyadirProfesorSinClases" visibility="private" method="_zgi5RI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgFmMY4fEeqaUfD-UOeXhg" name="resultado" type="_zej8MY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgFmMo4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgFmM44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_zbjEcI4fEeqaUfD-UOeXhg" name="ControladorTutoria">
        <ownedComment xmi:id="_zgpm5I4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos para
 altas, bajas, modificaciones y consultas de tutorÃ­as.
 *
@author Confiencial</body>
        </ownedComment>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgkHUI4fEeqaUfD-UOeXhg" name="insertarEnTablaTutoria" specification="_zgIpgI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgkHUY4fEeqaUfD-UOeXhg" name="cod_grupo">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgkHUo4fEeqaUfD-UOeXhg" name="tutor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgkHU44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;INSERT TUTORIA &quot;
                                         + &quot;VALUES (?,?,?,?,?)&quot;);
     
     int cod_tutor = tutor.getCodProfesor(); 
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     Curso curso = new Curso ();
     Convocatoria convocatoria = new Convocatoria();
     Tutoria tutoria = new Tutoria();
     
     try{

         System.out.println(&quot;Cod_tutor = &quot;+cod_tutor);
         stmt.setInt(1, tutoria.getNuevoCodTutoria());
         stmt.setInt(2, cod_tutor);
         stmt.setInt(3, cod_grupo); 
         stmt.setInt(4, curso.getCursoActual());
         stmt.setString(5, convocatoria.getConvocatoriaActual());

         dataAccessObject.actualizar();

         stmt.close();
     } catch (SQLException e) {
         System.out.println(&quot;insertarEnTablaTutoria &quot;+e.getMessage());
         throw new RuntimeException(&quot;Problema en insertarEnTablaTutoria&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgkuYI4fEeqaUfD-UOeXhg" name="eliminarTutoriasConvocatoriaActual" specification="_zfa30I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgkuYY4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM tutoria &quot;
                                         + &quot;WHERE ((CURSO_Cod_CURSO = ?) &quot;
                                         + &quot;AND (CONVOCATORIA_idCONVOCATORIA = ?))&quot;);

     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try{
         Convocatoria convocatoria = new Convocatoria();
         Curso curso = new Curso();
         stmt.setInt(1, curso.getCursoActual());
         stmt.setString(2, convocatoria.getConvocatoriaActual());
         dataAccessObject.actualizar();
         stmt.close();
     }
     catch (SQLException ex) {
         System.out.println(ex.getMessage());
         throw new RuntimeException(&quot;Problema en eliminarEvaluacionesConvocatoriaActual&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgkuYo4fEeqaUfD-UOeXhg" name="tieneTutorias" specification="_zgJQk44fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgkuY44fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgkuZI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM tutoria &quot;
                                         + &quot;WHERE (PROFESOR_Cod_P = ?) &quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         stmt.setInt(1, profesor.getCodProfesor());
         ResultSet rs = stmt.executeQuery();
         boolean ok = rs.next();
         dataAccessObject.close();
         return ok;
     } catch (SQLException e1) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Ha ocurrido un error la acceder a la Base de Datos&quot;);
     } catch (RuntimeException e2) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Ha ocurrido un error la acceder a la Base de Datos&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zglVcI4fEeqaUfD-UOeXhg" name="recuperarUltimoCodTutoria" specification="_zbkSkI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zglVcY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT Cod_TUTORIA &quot;
                                         + &quot;FROM tutoria &quot;
                                         + &quot;WHERE (Cod_TUTORIA >= ALL (SELECT Cod_TUTORIA&quot;
                                                             + &quot; FROM tutoria))&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
     try {
         ResultSet rs = stmt.executeQuery();
         int ultimo_cod = 0;
         if (rs.next()) {
             ultimo_cod = rs.getInt(1);
         }
         rs.close();
         dataAccessObject.close();
         return ultimo_cod;
     }
     catch (SQLException ex) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema al consultar la clave de la Ãºltima tutorÃ­a&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zglVco4fEeqaUfD-UOeXhg" name="estaRegistradoGrupoPractica" specification="_zgJ3oY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zglVc44fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zglVdI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;SELECT * &quot;
                                         + &quot;FROM tutoria &quot;
                                         + &quot;WHERE (GRUPO_PRACTICA_Cod_GP = ?)&quot;);
     DataAccessObject dataAccessObject = DataAccessObject.getDataAccessObjectConnected();
     PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());

     try {
         stmt.setInt(1, grupo.getCodGrupoPractica());

         ResultSet rs = stmt.executeQuery();

         boolean ok = rs.next();
         dataAccessObject.close();
         rs.close();
         return ok;
     } catch (SQLException e) {
         dataAccessObject.rollback();
         throw new RuntimeException(&quot;Problema en estaRegistradoGrupoPractica de tutoria&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zglVdY4fEeqaUfD-UOeXhg" name="borrarTutoriaGrupoPractica" specification="_zfbe4I4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zglVdo4fEeqaUfD-UOeXhg" name="codGrupoPractica">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zglVd44fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
          <language>java</language>
          <body>StringBuilder sql = new StringBuilder(&quot;DELETE &quot;
                                         + &quot;FROM TUTORIA &quot;
                                         + &quot;WHERE ((GRUPO_PRACTICA_Cod_GP = ?) &quot;
                                         + &quot;    AND (CURSO_Cod_CURSO = ?) &quot;
                                         + &quot;    AND (CONVOCATORIA_idCONVOCATORIA = ?))&quot;);

     try {
         Curso curso = new Curso();
         Convocatoria convocatoria = new Convocatoria();
         PreparedStatement stmt = dataAccessObject.getPreparedStatement(sql.toString());
         stmt.setInt(1, codGrupoPractica);
         stmt.setInt(2, curso.getCursoActual());
         stmt.setString(3, convocatoria.getConvocatoriaActual());
         dataAccessObject.actualizar();
         stmt.close();
     } catch (SQLException e) {
         System.out.println(&quot;borrarTutoriaGrupoPractica&quot;);
         throw new RuntimeException(&quot;Error al actualizar la Base de Datos.&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_zbjrgI4fEeqaUfD-UOeXhg" name="ControladorTutoria">
          <eAnnotations xmi:id="_zbjrgY4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_zbjrgo4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_zbjrhI4fEeqaUfD-UOeXhg" type="_zbjEcI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zbkSkI4fEeqaUfD-UOeXhg" name="recuperarUltimoCodTutoria" method="_zglVcI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zbkSkY4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zfa30I4fEeqaUfD-UOeXhg" name="eliminarTutoriasConvocatoriaActual" method="_zgkuYI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfa30Y4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zfbe4I4fEeqaUfD-UOeXhg" name="borrarTutoriaGrupoPractica" method="_zglVdY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zfbe4Y4fEeqaUfD-UOeXhg" name="codGrupoPractica">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zfcF8I4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zgIpgI4fEeqaUfD-UOeXhg" name="insertarEnTablaTutoria" method="_zgkHUI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgJQkI4fEeqaUfD-UOeXhg" name="cod_grupo">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgJQkY4fEeqaUfD-UOeXhg" name="tutor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgJQko4fEeqaUfD-UOeXhg" name="dataAccessObject" type="_zblgsI4fEeqaUfD-UOeXhg"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zgJQk44fEeqaUfD-UOeXhg" name="tieneTutorias" method="_zgkuYo4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgJQlI4fEeqaUfD-UOeXhg" name="profesor" type="_zfM1YY4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgJ3oI4fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_zgJ3oY4fEeqaUfD-UOeXhg" name="estaRegistradoGrupoPractica" method="_zglVco4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgJ3oo4fEeqaUfD-UOeXhg" name="grupo" type="_zeuUQI4fEeqaUfD-UOeXhg"/>
          <ownedParameter xmi:id="_zgJ3o44fEeqaUfD-UOeXhg" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_zblgsI4fEeqaUfD-UOeXhg" name="DataAccessObject">
        <ownedComment xmi:id="_zgpm5Y4fEeqaUfD-UOeXhg">
          <body>Clase que gestiona el acceso a la Base de Datos.
 *
@author Alberto Esteves Correia</body>
        </ownedComment>
        <ownedAttribute xmi:id="_zgRMYI4fEeqaUfD-UOeXhg" name="DRIVER" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_zgRMYY4fEeqaUfD-UOeXhg" value="&quot;com.mysql.jdbc.Driver&quot;"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_zgRMYo4fEeqaUfD-UOeXhg" name="URL" isStatic="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_zgRzcY4fEeqaUfD-UOeXhg" name="USER" isStatic="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_zgSagY4fEeqaUfD-UOeXhg" name="PASS" isStatic="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_zgTBkY4fEeqaUfD-UOeXhg" name="dataAccessObject" visibility="private" isStatic="true" type="_zblgsI4fEeqaUfD-UOeXhg" association="_zgt4UY4fEeqaUfD-UOeXhg">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_zgTBko4fEeqaUfD-UOeXhg" value="null"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_zgTBlI4fEeqaUfD-UOeXhg" name="statement" visibility="private" type="_zeg44I4fEeqaUfD-UOeXhg" association="_zgvGcY4fEeqaUfD-UOeXhg">
          <defaultValue xmi:type="uml:LiteralString" xmi:id="_zgTooI4fEeqaUfD-UOeXhg" value="null"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_zgTooo4fEeqaUfD-UOeXhg" name="connection" visibility="private" type="_zfctAI4fEeqaUfD-UOeXhg" association="_zgvtgY4fEeqaUfD-UOeXhg"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgl8gI4fEeqaUfD-UOeXhg" name="getDataAccessObjectConnected" specification="_zbmHwI4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgl8gY4fEeqaUfD-UOeXhg" type="_zblgsI4fEeqaUfD-UOeXhg" direction="return"/>
          <language>java</language>
          <body>if (dataAccessObject==null){
                 dataAccessObject = new DataAccessObject();
		}
		dataAccessObject.connect();
	
         return dataAccessObject;

 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgl8go4fEeqaUfD-UOeXhg" name="getPreparedStatement" specification="_zbmHwY4fEeqaUfD-UOeXhg">
          <ownedParameter xmi:id="_zgl8g44fEeqaUfD-UOeXhg" name="sql">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgl8hI4fEeqaUfD-UOeXhg" type="_zeg44I4fEeqaUfD-UOeXhg" direction="return"/>
          <language>java</language>
          <body>try {
         this.statement = connection.prepareStatement(sql);
         return statement;
     }
     catch (SQLException ex) {
         throw new RuntimeException(&quot;Problema al obtener el prepared statement&quot;
                                  + &quot; el sql es: &quot;+sql);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgl8hY4fEeqaUfD-UOeXhg" name="connect" specification="_zbmu1Y4fEeqaUfD-UOeXhg">
          <language>java</language>
          <body>try {
		Class.forName(DRIVER);
		connection = DriverManager.getConnection(URL, USER, PASS);
             connection.setAutoCommit(false);
	} catch (ClassNotFoundException e) {
		throw new RuntimeException(&quot;problemas de driver&quot;);
	} catch (SQLException e) {
		throw new RuntimeException(&quot;Ha ocurrido un error al conectar con la Base de Datos&quot;);
	}
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgmjkI4fEeqaUfD-UOeXhg" name="actualizar" specification="_zbnV4I4fEeqaUfD-UOeXhg">
          <language>java</language>
          <body>try{
         
         this.statement.executeUpdate();
	} catch (SQLException e){
         System.out.println(e.getSQLState());
         e.printStackTrace();
         System.out.println(e.getMessage());
         throw new RuntimeException(&quot;Error de actualizaciÃ³n &quot;);
	}
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgmjkY4fEeqaUfD-UOeXhg" name="close" specification="_zbnV4Y4fEeqaUfD-UOeXhg">
          <language>java</language>
          <body>try {
         statement.close();
         this.closeConnection();
     }
     catch (SQLException ex) {
         throw new RuntimeException(&quot;Problema al cerrar la conexiÃ³n con la Base de Datos&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgmjko4fEeqaUfD-UOeXhg" name="closeConnection" specification="_zbnV4o4fEeqaUfD-UOeXhg">
          <language>java</language>
          <body>try {
         connection.commit();
         connection.setAutoCommit(true);
         connection.close();
     } catch (SQLException ex) {
 //           this.rollback();
         throw new RuntimeException(&quot;Problema al cerrar la conexiÃ³n&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zgmjk44fEeqaUfD-UOeXhg" name="rollback" specification="_zbnV444fEeqaUfD-UOeXhg">
          <language>java</language>
          <body>try {
         statement.close();
         System.out.println(&quot;Rollback 1&quot;);
         connection.rollback();
         System.out.println(&quot;Rollback 2&quot;);
         connection.close();
     } catch (SQLException ex) {
         System.out.println(&quot;Problema al hacer rollback&quot;);
     }
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_zbmHwI4fEeqaUfD-UOeXhg" name="getDataAccessObjectConnected" isStatic="true" method="_zgl8gI4fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgpm5o4fEeqaUfD-UOeXhg">
            <body>MÃ©todo que nos devuelve el objeto dataAccessObject estÃ¡tico que tiene la clase.
     * La primera vez que se llama a getDataAccessObjectConnected() crea el objeto DataAccessObject
     * y harÃ¡ la conexiÃ³n a la BD. En cualquier caso se hace â€œreturn DataAccessObjectâ€� para que
     * podamos usar el objeto
     *
     * @return dataAccessObject</body>
          </ownedComment>
          <ownedParameter xmi:id="_zffwUI4fEeqaUfD-UOeXhg" type="_zblgsI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zbmHwY4fEeqaUfD-UOeXhg" name="getPreparedStatement" method="_zgl8go4fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgpm544fEeqaUfD-UOeXhg">
            <body>MÃ©todo que devuelve el objeto statement con el que realizaremos
     * las consultas sql.
     *
     * @param sql contiene la consulta sql a realizar
     *
     * @return statement</body>
          </ownedComment>
          <ownedParameter xmi:id="_zbmHwo4fEeqaUfD-UOeXhg" name="sql">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_zgKesI4fEeqaUfD-UOeXhg" type="_zeg44I4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zbmu0I4fEeqaUfD-UOeXhg" name="DataAccessObject" visibility="private">
          <eAnnotations xmi:id="_zbmu0Y4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_zbmu0o4fEeqaUfD-UOeXhg" key="create"/>
          </eAnnotations>
          <ownedParameter xmi:id="_zbmu1I4fEeqaUfD-UOeXhg" type="_zblgsI4fEeqaUfD-UOeXhg" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_zbmu1Y4fEeqaUfD-UOeXhg" name="connect" visibility="private" method="_zgl8hY4fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgpm6I4fEeqaUfD-UOeXhg">
            <body>Este mÃ©todo se encarga de cargar el Driver MySQL y de realizar
     *  la conexiÃ³n a la Base de Datos. Si ocurre algÃºn error al cargar el Driver
     *  o al intentar conectar a la Base de Datos, el mÃ©todo lanzarÃ¡ una excepciÃ³n.
     *</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_zbnV4I4fEeqaUfD-UOeXhg" name="actualizar" method="_zgmjkI4fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgpm6Y4fEeqaUfD-UOeXhg">
            <body>MÃ©todo que ejecuta la consulta SQL para insertar, borrar o actualizar.
     * Si ocurre algÃºn error, lanzarÃ¡ una excepciÃ³n.</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_zbnV4Y4fEeqaUfD-UOeXhg" name="close" method="_zgmjkY4fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgpm6o4fEeqaUfD-UOeXhg">
            <body>MÃ©todo que libera los recursos de la Base de Datos y se encarga de
     *  cerrar la conexiÃ³n a la Base de Datos.
     *  Si ocurre algÃºn error, lanzarÃ¡ una excepciÃ³n.</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_zbnV4o4fEeqaUfD-UOeXhg" name="closeConnection" visibility="private" method="_zgmjko4fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgpm644fEeqaUfD-UOeXhg">
            <body>MÃ©todo que realiza la entrega (commit) de la sentencia sql y 
     *  cierra la conexiÃ³n a la Base de Datos.
     *  Si ocurre algÃºn error, lanzarÃ¡ una excepciÃ³n.</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:id="_zbnV444fEeqaUfD-UOeXhg" name="rollback" method="_zgmjk44fEeqaUfD-UOeXhg">
          <ownedComment xmi:id="_zgpm7I4fEeqaUfD-UOeXhg">
            <body>MÃ©todo que aborta la transaciÃ³n y devuelve cualquier valor
     *  que fuera modificado a sus valores anteriores.
     *</body>
          </ownedComment>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_zgsqMI4fEeqaUfD-UOeXhg" name="" memberEnd="_zgsqMY4fEeqaUfD-UOeXhg _zgNiAI4fEeqaUfD-UOeXhg">
        <ownedEnd xmi:id="_zgsqMY4fEeqaUfD-UOeXhg" name="" type="_za49II4fEeqaUfD-UOeXhg" association="_zgsqMI4fEeqaUfD-UOeXhg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_zgtRQY4fEeqaUfD-UOeXhg" name="" memberEnd="_zgtRQo4fEeqaUfD-UOeXhg _zgPXMY4fEeqaUfD-UOeXhg">
        <ownedEnd xmi:id="_zgtRQo4fEeqaUfD-UOeXhg" name="" type="_za6LQY4fEeqaUfD-UOeXhg" association="_zgtRQY4fEeqaUfD-UOeXhg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_zgt4UY4fEeqaUfD-UOeXhg" name="" memberEnd="_zgt4Uo4fEeqaUfD-UOeXhg _zgTBkY4fEeqaUfD-UOeXhg">
        <ownedEnd xmi:id="_zgt4Uo4fEeqaUfD-UOeXhg" name="" type="_zblgsI4fEeqaUfD-UOeXhg" association="_zgt4UY4fEeqaUfD-UOeXhg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_zgvGcY4fEeqaUfD-UOeXhg" name="" memberEnd="_zgvGco4fEeqaUfD-UOeXhg _zgTBlI4fEeqaUfD-UOeXhg">
        <ownedEnd xmi:id="_zgvGco4fEeqaUfD-UOeXhg" name="" type="_zblgsI4fEeqaUfD-UOeXhg" association="_zgvGcY4fEeqaUfD-UOeXhg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_zgvtgY4fEeqaUfD-UOeXhg" name="" memberEnd="_zgvtgo4fEeqaUfD-UOeXhg _zgTooo4fEeqaUfD-UOeXhg">
        <ownedEnd xmi:id="_zgvtgo4fEeqaUfD-UOeXhg" name="" type="_zblgsI4fEeqaUfD-UOeXhg" association="_zgvtgY4fEeqaUfD-UOeXhg"/>
      </packagedElement>
    </packagedElement>
    <profileApplication xmi:id="_zIaGAI4fEeqaUfD-UOeXhg">
      <eAnnotations xmi:id="_zIaGAY4fEeqaUfD-UOeXhg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile"/>
    </profileApplication>
  </uml:Model>
  <UMLLabProfile:TargetLanguage xmi:id="_zIatEI4fEeqaUfD-UOeXhg" base_Package="_y2_l4I4fEeqaUfD-UOeXhg">
    <languageName>java</languageName>
  </UMLLabProfile:TargetLanguage>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zayPco4fEeqaUfD-UOeXhg" base_Element="_zaxoYI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_za6yU44fEeqaUfD-UOeXhg" base_Element="_za6yUI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_za8ng44fEeqaUfD-UOeXhg" base_Element="_za8ngI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zbKp8o4fEeqaUfD-UOeXhg" base_Element="_zbKC4I4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zbNGMI4fEeqaUfD-UOeXhg" base_Element="_zbMfII4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zbO7Yo4fEeqaUfD-UOeXhg" base_Element="_zbOUUY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zbQJg44fEeqaUfD-UOeXhg" base_Element="_zbQJgI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zbSlw44fEeqaUfD-UOeXhg" base_Element="_zbSlwI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zbZTcI4fEeqaUfD-UOeXhg" base_Element="_zbYsYI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zbjrg44fEeqaUfD-UOeXhg" base_Element="_zbjrgI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zbmu044fEeqaUfD-UOeXhg" base_Element="_zbmu0I4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zeaLMI4fEeqaUfD-UOeXhg" base_Element="_zeUroI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zeayQY4fEeqaUfD-UOeXhg" base_Element="_zeayQI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zebZUI4fEeqaUfD-UOeXhg" base_Element="_zeayQo4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zecAYI4fEeqaUfD-UOeXhg" base_Element="_zebZUY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zecncI4fEeqaUfD-UOeXhg" base_Element="_zecAYY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zedOgI4fEeqaUfD-UOeXhg" base_Element="_zecncY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zed1kI4fEeqaUfD-UOeXhg" base_Element="_zedOgY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zeecoI4fEeqaUfD-UOeXhg" base_Element="_zed1kY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zehf8I4fEeqaUfD-UOeXhg" base_Element="_zeg44I4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zeiHAI4fEeqaUfD-UOeXhg" base_Element="_zehf8Y4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zeiuEY4fEeqaUfD-UOeXhg" base_Element="_zeiuEI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zej8MI4fEeqaUfD-UOeXhg" base_Element="_zejVII4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zej8Mo4fEeqaUfD-UOeXhg" base_Element="_zej8MY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zetGII4fEeqaUfD-UOeXhg" base_Element="_zer4AI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zeu7UI4fEeqaUfD-UOeXhg" base_Element="_zeuUQI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zfDEYI4fEeqaUfD-UOeXhg" base_Element="_ze8WsI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zfM1YI4fEeqaUfD-UOeXhg" base_Element="_zfMOUI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zfODgI4fEeqaUfD-UOeXhg" base_Element="_zfM1YY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zfaQwY4fEeqaUfD-UOeXhg" base_Element="_zfaQwI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zfeiMI4fEeqaUfD-UOeXhg" base_Element="_zfctAI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zffJQI4fEeqaUfD-UOeXhg" base_Element="_zfeiMY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Generics xmi:id="_zfrWgY4fEeqaUfD-UOeXhg" genericsValue="ListadoEvaluacion" base_Element="_zfrWgI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Generics xmi:id="_zfwPAI4fEeqaUfD-UOeXhg" genericsValue="Evaluacion" base_Element="_zfvA4Y4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Generics xmi:id="_zf4x4I4fEeqaUfD-UOeXhg" genericsValue="GrupoPractica" base_Element="_zf28tY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zf6AAI4fEeqaUfD-UOeXhg" base_Element="_zf5Y844fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Generics xmi:id="_zgEYEY4fEeqaUfD-UOeXhg" genericsValue="ListadoProfesor" base_Element="_zgEYEI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Generics xmi:id="_zgE_JY4fEeqaUfD-UOeXhg" genericsValue="ListadoProfesor" base_Element="_zgE_IY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Generics xmi:id="_zgG0UI4fEeqaUfD-UOeXhg" genericsValue="ListadoProfesor" base_Element="_zgFmMY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zgPXMI4fEeqaUfD-UOeXhg" base_Element="_zgNiAI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zgP-QI4fEeqaUfD-UOeXhg" base_Element="_zgPXMY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zgRzcI4fEeqaUfD-UOeXhg" base_Element="_zgRMYo4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zgSagI4fEeqaUfD-UOeXhg" base_Element="_zgRzcY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zgTBkI4fEeqaUfD-UOeXhg" base_Element="_zgSagY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zgTBk44fEeqaUfD-UOeXhg" base_Element="_zgTBkY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zgTooY4fEeqaUfD-UOeXhg" base_Element="_zgTBlI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_zgUPsI4fEeqaUfD-UOeXhg" base_Element="_zgTooo4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zgtRQI4fEeqaUfD-UOeXhg" base_Element="_zgsqMI4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zgt4UI4fEeqaUfD-UOeXhg" base_Element="_zgtRQY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zgvGcI4fEeqaUfD-UOeXhg" base_Element="_zgt4UY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zgvtgI4fEeqaUfD-UOeXhg" base_Element="_zgvGcY4fEeqaUfD-UOeXhg"/>
  <UMLLabProfile:Reference xmi:id="_zgwUkI4fEeqaUfD-UOeXhg" base_Element="_zgvtgY4fEeqaUfD-UOeXhg"/>
</xmi:XMI>
